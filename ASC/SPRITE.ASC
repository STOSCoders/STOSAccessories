1 rem ********************************
2 rem *                              *
3 rem *       SPRITES DESIGNER       *
4 rem *                              *
5 rem *      By Francois Lionet      *
6 rem *    (c) Jawx/Mandarin 1988    *
7 rem *                              *
8 rem ***********29/3/1989************
10 VERSION$="1.02"
15 SPRMAXNB=256
20 dim CURINK(3),OLDINK(2),XPAL(2),ROUTINES(18),LEFTAD(9,8),RGB(3),RGBY(3),PAL(16),T$(10),S$(SPRMAXNB),HX(SPRMAXNB),HY(SPRMAXNB),TX(SPRMAXNB),TY(SPRMAXNB),ANIX1(12),ANIY1(12),ANIX2(12),ANIY2(12),ANIS(16),ANIV(16),ANISP(6,16),ANISUP(6),ANICUR(6),ANIVIT(6,16),ANIVV(6),P(16),ANIXSP(6),ANIYSP(6)
25 curs off : hide on : wait vbl : clear key 
30 if mode=2 then clw : locate 1,7 : centre "I only work on a color monitor." : cdown : cdown : centre "Use the other sprite editor in Hi res." : locate 1,18 : centre "Sorry! Press any key." : wait key : default : end 
35 palette ,$666,,0 : wait vbl : for X=0 to 15 : PAL(X)=colour(X) : next X : fade 2 : wait 14
40 key off : if mode=1 then mode 0
45 SPRMAXBANK=free-86*1024 : if SPRMAXBANK<4096 then cls : locate 1,13 : centre "Not enough memory to work!" : locate 1,23 : centre "Press any key." : fade 1,0,$666 : wait key : default : end 
50 if length(1)=0 then if length(5)<>0 then bcopy 5 to 1 : erase 5 else cls : locate 1,13 : centre "I lost my own sprites bank!" : locate 1,23 : centre "Press any key." : fade 1,0,$666 : wait key : default : end 
55 if length(1)<>0 and length(5)<>0 then erase 1 : bcopy 5 to 1 : erase 5
60 fade 4 : wait 14
65 reserve as screen 13 : cls 13
70 reserve as work 12,4096
75 reserve as screen 10 : cls 10
80 loke start(1)+4,$12 : doke start(1)+16,14
99 rem > Initialise variables
100 TXMAX=64 : TYMAX=64 : TX=32 : TY=32 : OLDTX=-1 : OLDTY=-1
105 XSPR=240 : YSPR=8 : ADSPR=XSPR/16*8+YSPR*160
110 XZOOM=32 : YZOOM=1 : TXZOOM=192 : TYZOOM=144 : ADZOOM=XZOOM/16*8+YZOOM*160
115 XPAL(1)=230 : XPAL(2)=278 : YPAL=84 : TXPAL=9 : TYPAL=9
120 XOP=224 : YOP=128 : OPXT=224/8+1 : OPYT=128/8+1
125 XPAINT=224 : YPAINT=176 : TYPAINT=23
130 RGBX=80 : RGBTX=14 : RGBY(0)=158 : RGBY(1)=174 : RGBY(2)=190 : RGBXT=6 : RGBYT=19
135 BLOCSP=13 : BLOCMX=64 : BLOCMY=40
140 ADBLOC=4+leek(start(1)+4)+(BLOCSP-1)*8
150 restore 50000 : for X=0 to 17 : read ROUTINES(X) : next X
155 restore 51000 : for Y=0 to 9 : for X=0 to 8 : read LEFTAD(Y,X) : next X : next Y
160 SELXT=9 : SELYT=20 : SELY=146 : SELTY=53
165 SCRCODE$=chr$($44)+chr$($55)+chr$($35)+chr$($28)
170 CODEPAL=$50414C54
175 ANIHY=SELY-1 : restore 53000 : for X=1 to 11 : read ANIX1(X),Y1,ANIX2(X),Y2 : ANIY1(X)=Y1+ANIHY : ANIY2(X)=Y2+ANIHY : next X
180 ANIXST=5 : ANIYST=14 : ANIXTV=33 : ANIYTV=19 : for Y=0 to 5 : for X=0 to 15 : ANIVIT(Y,X)=1 : next X : ANIVV(Y)=5 : ANIXSP(Y)=128 : ANIYSP(Y)=50 : next Y
200 cls logic : cls back : gosub 10300
299 rem > Initialise zones
300 reset zone 
304 rem Left boxes: 52-60
305 for Y=0 to 8 : set zone 52+Y,0,Y*16 to 24,(Y+1)*16 : next Y
309 rem Rigth boxes: 62-79
310 for Y=0 to 2 : for X=0 to 5 : set zone 62+Y*6+X,225+16*X,129+16*Y to 225+16*X+14,129+Y*16+14 : next X : next Y
314 rem Palettes: 80/81
315 set zone 80,XPAL(1),YPAL to XPAL(1)+TXPAL*4,YPAL+TYPAL*4
320 set zone 81,XPAL(2),YPAL to XPAL(2)+TXPAL*4,YPAL+TYPAL*4
324 rem Sprite arrows: left 82/right 83/up 84/down 85
325 set zone 82,224,16 to 240,64 : set zone 83,304,16 to 319,64
330 set zone 84,240,0 to 304,YSPR : set zone 85,240,YSPR+TYMAX-2 to 304,YSPR+TYMAX+8
334 rem Storage arrows TOP: 86/87 - middle 88/89 - bottom 90/91 - storage 92
335 set zone 86,0,148 to 15,171 : set zone 87,208,148 to 224,171
336 set zone 88,0,172 to 15,185 : set zone 89,208,172 to 224,185
337 set zone 90,0,186 to 15,199 : set zone 91,208,186 to 224,199
338 set zone 92,16,146 to 207,199
339 rem Zoom: 50
340 set zone 50,XZOOM,YZOOM to XZOOM+TXZOOM,YZOOM+TYZOOM
344 rem Sprite: 51
345 set zone 51,XSPR,YSPR to XSPR+TXMAX,YSPR+TYMAX
400 CURINK(1)=1 : CURINK(2)=0
405 OP=0
415 TYPEFILL=8
420 OLDZ=0 : NOJUMP=false : MENNB=0
425 BLOCON=0 : BLOCOP=0 : HOTNB=0
430 SPRNB=0 : SPRCUR=0 : TMEN=1
435 FILEPAL=1 : FILENAME$=""
450 FLGDEB=true : gosub 10850 : FLGDEB=0 : OLDGET=-1
499 rem > Scrollings
500 def scroll 1,144,92 to 240,172,-1,0
505 def scroll 2,144,92 to 240,172,1,0
510 def scroll 3,144,92 to 240,172,0,-1
515 def scroll 4,144,92 to 240,172,0,1
799 rem > AUTO GRAB
800 if accnb=0 then 900
805 NP=current : LB=length(NP,1) : if LB=0 then 900
810 AB=start(NP,1) : FB=AB+LB : if leek(AB)<>$19861987 then 900
815 gosub 10900 : T$(0)="GRABBING" : gosub 11000
820 if LB>=SPRMAXBANK then boom : gosub 10900 : T$(0)="Not enough" : T$(1)="memory" : T$(2)="to grab!" : gosub 11000 : wait 200 : goto 900
825 NS=deek(AB+16) : if NS>=SPRMAXNB then boom : gosub 10900 : T$(1)="Too many" : T$(2)="sprites!" : gosub 11000 : wait 200 : goto 900
830 DMIDHI=leek(AB+12)-leek(AB+8) : NSMID=deek(AB+18) : NSHI=deek(AB+20) : AOTHER=leek(AB+8)+AB+4 : AB=AB+22
835 AD=AB : if NS<>0 then locate OPXT,OPYT+3 : print "Out of";NS : for N=0 to NS-1 : locate OPXT,OPYT+2 : print "Number";N+1; : IX=peek(AB+4) : IY=peek(AB+5) : TX(N)=IX*16 : TY(N)=IY : HX(N)=peek(AB+6) : HY(N)=peek(AB+7) : S$(N)=SCRCODE$+"    "+space$(IX*IY*4*2) : doke varptr(S$(N))+4,IX*16 : doke varptr(S$(N))+6,IY : A=AD+leek(AB)+IX*IY*2 : copy A,A+IX*IY*4*2 to varptr(S$(N))+8 : AB=AB+8 : next N : SPRNB=NS
840 if leek(AB)=CODEPAL then AB=AB+4 : for X=0 to 15 : PAL(X)=deek(AB) : AB=AB+2 : next X
845 if AOTHER<FB and (NSMID<>0 or NSHI<>0) then OTHER$=space$(FB-AOTHER) : copy AOTHER,FB to varptr(OTHER$)
850 for X=0 to 15 : colour X,PAL(X) : next X : gosub 11300 : gosub 11375
899 rem > Title
900 MENNB=0 : OP=0 : gosub 10800
905 logic=back : sprite 1,XSPR,YSPR,14 : update : sprite off : update : logic=physic
910 areg(1)=ADSPR+back : areg(2)=ADZOOM+160*6+16+logic : areg(3)=start(12) : dreg(0)=0 : dreg(1)=2 : dreg(2)=64/16 : dreg(3)=64 : call 15 : dreg(0)=1 : call 15 : cls back,0,XSPR,YSPR to XSPR+64,YSPR+64
911 locate 28,23 : paper 0 : pen 1 : auto back on : print "Version ";VERSION$;
915 gosub 11500 : gosub 11700 : DRIVGRABI=drive : DRIVGRAB=drive : DRIVPIC=drive : DRIVSAVE=drive : DRIVBACK=drive : PATHBACK$=A$ : PATHGRAB$=A$ : PATHGRABI$=A$ : PATHPIC$=A$ : PATHSAVE$=A$
920 while mouse key : wend : repeat : until mouse key
925 OLDTX=-1 : gosub 10350 : gosub 10000 : gosub 1805
990 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
991 rem            MAIN SCREEN
992 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
999 rem > Plot
1000 REDO=false : OP=0 : gosub 10400 : SPMOUSE=2
1001 repeat : repeat : gosub 10100 : until KM : if Z<>50 then 1001
1005 ink CURINK(KM) : auto back off : set paint 1,1,1
1010 logic=back : bar XZOOM+IZOOM*XS,YZOOM+IZOOM*YS to XZOOM+IZOOM*(XS+1)-1,YZOOM+IZOOM*(YS+1)-1 : plot XSPR+XS,YSPR+YS
1015 logic=physic : bar XZOOM+IZOOM*XS,YZOOM+IZOOM*YS to XZOOM+IZOOM*(XS+1)-1,YZOOM+IZOOM*(YS+1)-1 : plot XSPR+XS,YSPR+YS
1020 OLDXS=XS : OLDYS=YS : OLDKM=KM : UNDOFLG=0
1025 until false
1099 rem > Draw
1100 OP=1 : gosub 10400 : LINEDRAW=1175 : SPMOUSE=3
1105 gosub 10300 : REDO=false
1110 repeat : gosub 10100 : until KM : REDO=true
1115 X1=XS : Y1=YS : UNDOFLG=0 : UNDO$=screen$(back,XSPR,YSPR to XSPR+64,YSPR+64)
1120 repeat 
1122 cls 13,0,160,100 to 160+TX,100+TY : screen$(13,160,100)=SP$
1125 set line $FFFF,1,0,0 : set paint FIL1,FIL2,0 : auto back off : ink CURINK(1) : logic=13 : gosub LINEDRAW
1127 logic=physic : screen copy 13,160,100,160+TX,100+TY to back,XSPR,YSPR : screen copy 13,160,100,160+TX,100+TY to logic,XSPR,YSPR
1130 gosub 10000 : gosub 10100 : OLDXS=XS : OLDYS=YS : OLDKM=KM : until KM=0
1135 DX=X1-XS : DY=Y1-YS
1140 repeat 
1145 cls 13,0,160,100 to 160+TX,100+TY : screen$(13,160,100)=SP$
1150 set line $FFFF,1,0,0 : set paint FIL1,FIL2,0 : auto back off : ink CURINK(1) : logic=13 : gosub LINEDRAW+5
1155 logic=physic : screen copy 13,160,100,160+TX,100+TY to back,XSPR,YSPR : screen copy 13,160,100,160+TX,100+TY to logic,XSPR,YSPR
1160 gosub 10000 : gosub 10100 : OLDXS=XS : OLDYS=YS : OLDKM=KM : until KM
1165 if KM<>1 then gosub 10350 : gosub 10000 : while mouse key : wend : goto 1105
1170 gosub 10300 : UNDOFLG=0 : goto 1140
1175 draw 160+X1,100+Y1 to 160+XS,100+YS : return 
1180 draw 160+XS+DX,100+YS+DY to 160+XS,100+YS : return 
1199 rem > Box
1200 OP=2 : gosub 10400 : LINEDRAW=1205 : SPMOUSE=4 : goto 1105
1205 box 160+X1,100+Y1 to 160+XS,100+YS : return 
1210 box 160+XS+DX,100+YS+DY to 160+XS,100+YS : return 
1299 rem > Cercle
1300 OP=3 : gosub 10400 : LINEDRAW=1305 : SPMOUSE=5 : goto 1105
1305 R=abs(XS-X1) : arc 160+X1,100+Y1,R,0,3600 : return 
1310 arc 160+XS+DX,100+YS+DY,R,0,3600 : return 
1399 rem > Ellipse
1400 OP=4 : gosub 10400 : LINEDRAW=1405 : SPMOUSE=6 : goto 1105
1405 RX=abs(XS-X1) : RY=abs(YS-Y1) : earc 160+X1,100+Y1,RX,RY,0,3600 : return 
1410 earc 160+XS+DX,100+YS+DY,RX,RY,0,3600 : return 
1499 rem > Clear sprite
1500 gosub 10900 : T$(0)="CLEAR " : T$(2)="Confirm!" : gosub 11000 : gosub 11100 : unpack 11,13 : gosub 10805
1505 if R then cls back,0,XSPR,YSPR to XSPR+TX,YSPR+TY : cls logic,0,XSPR,YSPR to XSPR+TX,YSPR+TY : gosub 10000
1510 goto ROUTINES(OP)
1515 return 
1599 rem > Paint
1600 REDO=false : OP=6 : gosub 10400 : SPMOUSE=8
1605 repeat : gosub 10100 : until KM : if Z<>50 then 1605
1610 B=1 : UNDOFLG=0 : UNDO$=screen$(back,XSPR,YSPR to XSPR+64,YSPR+64)
1611 if point(XSPR+XS,YSPR+YS)=B or B=CURINK(KM) then inc B : goto 1611
1612 set line $FFFF,1,0,0 : ink B : auto back off : logic=back : box XSPR-1,YSPR-1 to XSPR+TX,YSPR+TY
1615 ink CURINK(KM) : set paint FIL1,FIL2,0 : paint XSPR+XS,YSPR+YS : gosub 10000 : ink 1 : box XSPR-1,YSPR-1 to XSPR+TX,YSPR+TY
1620 logic=physic : gosub 10000 : screen copy back,XSPR,YSPR,XSPR+64,YSPR+64 to logic,XSPR,YSPR
1625 goto 1605
1699 rem > Set paint up
1700 dec TYPEFILL : if TYPEFILL=0 then TYPEFILL=36
1705 goto 1805
1799 rem > Set Paint down
1800 inc TYPEFILL : if TYPEFILL>36 then TYPEFILL=1
1805 X=1 : Y=1
1810 auto back on : ink 1 : FIL1=2 : FIL2=TYPEFILL : if TYPEFILL>24 then FIL1=3 : FIL2=TYPEFILL-24
1815 set paint FIL1,FIL2,1 : bar XPAINT,YPAINT to 319,YPAINT+TYPAINT
1820 wait 5 : return 
1899 rem > Filled box
1900 OP=9 : gosub 10400 : LINEDRAW=1905 : SPMOUSE=9 : goto 1105
1905 bar 160+X1,100+Y1 to 160+XS,100+YS : return 
1910 bar 160+XS+DX,100+YS+DY to 160+XS,100+YS : return 
1999 rem > Filled circle
2000 OP=10 : gosub 10400 : LINEDRAW=2005 : SPMOUSE=10 : goto 1105
2005 R=abs(XS-X1) : circle 160+X1,100+Y1,R : return 
2010 circle 160+XS+DX,100+YS+DY,R : return 
2099 rem > Filled ellipse
2100 OP=11 : gosub 10400 : LINEDRAW=2105 : SPMOUSE=11 : goto 1105
2105 RX=abs(XS-X1) : RY=abs(YS-Y1) : ellipse 160+X1,100+Y1,RX,RY : return 
2110 ellipse 160+XS+DX,100+YS+DY,RX,RY : return 
2199 rem > UNDO
2200 if MENNB<>0 and MENNB<>1 then 2235
2205 OPSAVE=OLDOP : OP=12 : gosub 10400
2210 if REDO then gosub 10350
2215 if UNDOFLG=0 then UNUNDO$=screen$(back,XSPR,YSPR to XSPR+64,YSPR+64)
2216 cls back,0,XSPR,YSPR to XSPR+64,YSPR+64
2220 if UNDOFLG=0 then screen$(back,XSPR,YSPR)=UNDO$ : SP$=UNDO$ else screen$(back,XSPR,YSPR)=UNUNDO$ : SP$=UNUNDO$
2225 OLDTX=-1 : OLDTY=-1 : gosub 10000 : screen copy back,XSPR,YSPR,XSPR+64,YSPR+64 to logic,XSPR,YSPR
2230 UNDOFLG=UNDOFLG xor 1 : clear key : OP=OPSAVE : gosub 10400
2235 while mouse key or inkey$<>"" : wend : return 
2299 rem > REDUCE
2300 OP=13 : gosub 10400 : SPMOUSE=1 : REDO=true : gosub 10300 : FLINK=0
2305 UNDOFLG=0 : repeat : gosub 10100
2310 if Z<>50 then 2305
2315 gosub 10350 : ink FLINK : gr writing 1 : auto back on : draw XSPR,YSPR+YS to XSPR+TX-1,YSPR+YS : draw XSPR+XS,YSPR to XSPR+XS,YSPR+TY-1 : gosub 10000 : FLINK=(FLINK+1) mod 16
2320 until KM : redraw 
2325 cls 13 : screen$(13,0,0)=SP$
2330 X=320/TX : Y=200/TY : reduce 13 to 13,0,0,max(1,X*XS),max(1,Y*YS) : set paint 1,1,0 : logic=13 : auto back off : ink 0 : bar X*XS,0 to 70,50 : bar 0,Y*YS to 70,50 : logic=physic
2335 screen copy 13,0,0,TX,TY to back,XSPR,YSPR : screen copy 13,0,0,TX,TY to logic,XSPR,YSPR : gosub 10000 : gosub 10300
2340 goto 2305
2399 rem > ZOOM
2400 OP=14 : gosub 10400 : SPMOUSE=1 : REDO=true : gosub 10300
2405 UNDOFLG=0 : repeat : gosub 10100 : until KM : if KM=2 then 2405
2410 while mouse key : wend : repeat 
2415 gosub 10100
2420 if KM=2 then gosub 10350 : gosub 10000 : goto 2405
2425 if Z<>50 then 2415
2430 cls 13 : screen$(13,0,0)=SP$ : zoom 13,0,0,TX,TY to 13,64,64,64+TX+XS+1,64+TY+YS+1
2435 screen copy 13,64,64,64+TX,64+TY to back,XSPR,YSPR : screen copy 13,64,64,64+TX,64+TY to logic,XSPR,YSPR : gosub 10000
2440 until KM
2445 gosub 10300 : while mouse key : wend : goto 2405
2499 rem > Flip
2500 OPSAVE=OLDOP : OP=15 : gosub 10400
2505 areg(1)=back+ADSPR : areg(2)=start(13)+100*160+80 : dreg(1)=TX : dreg(2)=TY : dreg(0)=2 : call 15
2510 goto 2610
2600 OPSAVE=OLDOP : OP=16 : gosub 10400
2605 for Y=0 to TY-1 : screen copy back,XSPR,YSPR+Y,XSPR+TX,YSPR+Y+1 to 13,160,100+TY-1-Y : next Y
2610 screen copy 13,160,100,160+TX,100+TY to back,XSPR,YSPR : screen copy 13,160,100,160+TX,100+TY to logic,XSPR,YSPR : gosub 10000
2615 gosub 10300 : while mouse key : wend 
2620 OP=OPSAVE : gosub 10400 : return 
2699 rem > Rotate
2700 OPSAVE=OLDOP : OP=17 : gosub 10400 : if TX<>TY then bell : goto 2615
2705 areg(1)=back+ADSPR : areg(2)=start(13)+100*160+80 : dreg(1)=TX : dreg(2)=TY : dreg(0)=3 : call 15
2710 screen copy 13,160,100,160+min(TX,64),100+TY to back,XSPR,YSPR : screen copy 13,160,100,160+min(TX,64),100+TY to logic,XSPR,YSPR : gosub 10000
2715 goto 2615
2799 rem > Left palette
2800 Z=1 : goto 2810
2804 rem > Right palette
2805 Z=2
2810 X=(XM-XPAL(Z))/TXPAL : Y=(YM-YPAL)/TYPAL
2815 if X<0 or X>3 or Y<0 or Y>3 then return 
2820 CURINK(Z)=Y*4+X : if CURINK(Z)=OLDINK(Z) then 2840
2825 set line $FFFF,1,0,0 : auto back off : I=OLDINK(Z) mod 4 : J=OLDINK(Z)/4
2830 logic=back : ink 0 : box XPAL(Z)+I*TXPAL-1,YPAL+J*TYPAL-1 to XPAL(Z)+(I+1)*TXPAL-1,YPAL+(J+1)*TYPAL-1
2835 ink 1 : box XPAL(Z)+X*TXPAL-1,YPAL+Y*TYPAL-1 to XPAL(Z)+(X+1)*TXPAL-1,YPAL+(Y+1)*TYPAL-1 : logic=physic : screen copy back,224,YPAL-2,320,YPAL+TYPAL*4 to logic,224,YPAL-2 : redraw 
2840 OLDINK(Z)=CURINK(Z) : if MENNB=7 and FLG=0 then pop : pop : goto 3510
2845 return 
2999 rem > Left sprite arrow
3000 screen copy back,XSPR,YSPR,XSPR+TX,YSPR+TY to 13,160,100
3005 screen copy back,XSPR,YSPR,XSPR+16,YSPR+TY to 13,160+TX,100
3010 logic=13 : scroll 1 : logic=physic
3015 screen copy 13,160,100,160+TX,100+TY to back,XSPR,YSPR : gosub 10000
3020 screen copy 13,160,100,160+TX,100+TY to logic,XSPR,YSPR
3025 gosub 10300 : return 
3099 rem > Right sprite arrow
3100 screen copy back,XSPR,YSPR,XSPR+TX,YSPR+TY to 13,160,100
3105 screen copy back,XSPR+TX-16,YSPR,XSPR+TX,YSPR+TY to 13,144,100
3110 logic=13 : scroll 2 : logic=physic : goto 3015
3136 if BY16 then XM=XM and $FFF0
3199 rem > Up sprite arrow
3200 screen copy back,XSPR,YSPR,XSPR+TX,YSPR+TY to 13,160,100
3205 screen copy back,XSPR,YSPR,XSPR+TX,YSPR+8 to 13,160,100+TY
3210 logic=13 : scroll 3 : logic=physic : goto 3015
3299 rem > Down sprite arrow
3300 screen copy back,XSPR,YSPR,XSPR+TX,YSPR+TY to 13,160,100
3305 screen copy back,XSPR,YSPR+TY-8,XSPR+TX,YSPR+TY to 13,160,92
3310 logic=13 : scroll 4 : logic=physic : goto 3015
3399 rem > Fix X/Y size
3400 M=7 : gosub 10700 : MENNB=8 : gosub 10600 : gosub 10900 : T$(0)="Fix size" : gosub 11000 : locate OPXT,OPYT+2 : print "  X :";TX : locate OPXT,OPYT+3 : print "  Y :";TY; : NOJUMP=true
3405 gosub 10500 : REDO=0 : gosub 10300
3410 gosub 10100 : if KM=2 then 3446
3415 if Z<>51 then 3410
3420 X=max(16,(XM+8-XSPR) and $FFFFFFF0) : Y=YM-YSPR : if X>64 or Y<=0 or Y>64 or (X=TX and Y=TY) then 3410
3425 TX=X : TY=Y : OLDXS=XM : OLDYS=YM : cls back,0,XSPR,YSPR to XSPR+64,YSPR+64 : screen$(back,XSPR,YSPR)=SP$
3430 if TX<64 then cls back,0,XSPR+TX,YSPR to XSPR+64,YSPR+64
3435 if TY<64 then cls back,0,XSPR,YSPR+TY to XSPR+64,YSPR+64
3440 screen copy back,XSPR,YSPR,XSPR+64,YSPR+64 to logic,XSPR,YSPR : redraw : OLDTX=-1 : gosub 10000 : gosub 9200
3445 locate OPXT,OPYT+2 : print "  X :";TX;" "; : locate OPXT,OPYT+3 : print "  Y :";TY;" "; : locate OPXT,OPYT : print "SMALL=FAST"; : goto 3410
3446 M=0 : TMEN=7 : gosub 10700
3450 MENNB=0 : gosub 10800 : NOJUMP=false
3455 gosub 10500 : gosub 10300
3460 if OLDOP<>-1 then goto ROUTINES(OLDOP)
3465 goto 1000
3474 rem > REDUCE
3475 M=7 : TMEN=2 : CX=TX : CY=TY : gosub 10700
3477 while CX : for X=XSPR to XSPR+TX-1 : if point(X,YSPR)=0 then next X : gosub 3200 : dec CX : if CX then wend 
3480 while CY : for Y=YSPR to YSPR+TY-1 : if point(XSPR,Y)=0 then next Y : gosub 3000 : dec CY : if CY then wend 
3485 M=7 : TMEN=2 : gosub 10700
3490 goto 3405
3499 rem > Set RVB
3500 M=6 : gosub 10700 : MENNB=7 : gosub 10600 : gosub 10900 : T$(1)=" Set  RGB " : gosub 11000 : NOJUMP=true : REDO=0
3505 screen copy 13,0,145,192,200 to back,16,145 : screen copy 13,0,145,192,200 to logic,16,145
3506 paper 0 : pen 1 : locate RGBXT-3,RGBYT : print "R:"; : locate RGBXT-3,RGBYT+2 : print "G:"; : locate RGBXT-3,RGBYT+4 : print "B:";
3510 OLDC=-1 : OLDCP=-1
3515 if OLDC=CURINK(1) then 3545
3520 sprite off 2 : sprite off 3 : sprite off 4 : update : OLDC=CURINK(1) : set paint 1,1,1 : ink OLDC : auto back on 
3525 bar 1,146 to 15,198 : bar 208,146 to 223,198
3530 RGB=colour(OLDC) : RGB(0)=(RGB and $700)/256 : RGB(1)=(RGB and $70)/16 : RGB(2)=RGB and $7
3535 for Y=0 to 2 : locate RGBXT,RGBYT+Y*2 : print str$(RGB(Y))-" " : next Y
3540 for X=0 to 2 : sprite X+2,RGBX+RGBTX*RGB(X),RGBY(X),12 : next X : update 
3545 gosub 10100 : if KM=2 then 3580
3546 if Z=50 then CPOINT=point(XSPR+XS,YSPR+YS) else CPOINT=OLDC
3548 if CPOINT<>OLDCP then OLDCP=CPOINT : Z=1 : X=CPOINT mod 4 : Y=CPOINT/4 : FLG=1 : gosub 2820 : FLG=0 : CURINK(1)=OLDC
3549 if KM=1 and Z=50 then CURINK(1)=CPOINT : goto 3515
3554 if KM<>1 then 3515
3555 X=collide(1,128,8) and %11100 : if X=0 then 3545
3560 for C=0 to 2 : if btst(C+2,X)=0 then next C : goto 3545
3565 X=(XM-RGBX)/RGBTX : if X<0 or X>7 then 3545
3570 sprite C+2,XM,RGBY(C),12 : RGB(C)=X : locate RGBXT,RGBYT+C*2 : print str$(RGB(C))-" "; : C=RGB(0)*256+RGB(1)*16+RGB(2) : PAL(OLDC)=C : colour OLDC,C
3575 update : wait vbl : goto 3515
3579 rem End of set RGB
3580 M=0 : TMEN=7 : gosub 10700 : for X=1 to 4 : sprite off X : next X
3585 unpack 14,13 : screen copy 13,0,145,224,200 to back,0,145 : screen copy 13,0,145,224,200 to logic,0,145 : gosub 11300 : gosub 11375
3590 goto 3450
3594 rem RGB undo
3595 M=7 : TMEN=2 : gosub 10700 : wait 15 : M=7 : TMEN=2 : gosub 10700 : colour OLDC,RGB : OLDC=-1 : goto 3515
3597 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3598 rem          STORAGE ARROWS
3599 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3600 DX=-1 : S=0 : goto 3610
3601 DX=1 : S=0 : goto 3610
3602 DX=-1 : S=1 : goto 3610
3603 DX=1 : S=1 : goto 3610
3604 DX=-1 : S=2 : goto 3610
3605 DX=1 : S=2
3610 if S=2 and DX=-1 then SPRCUR=0 : gosub 11300 : gosub 11375 : return 
3611 if S=2 and DX=1 then SPRCUR=SPRNB : gosub 11300 : gosub 11375 : return 
3614 if SPRCUR+DX<0 or SPRCUR+DX>SPRNB then return 
3615 SPRCUR=SPRCUR+DX : gosub 11300 : if S=1 then gosub 11375 : wait 2 : return 
3620 if DX<0 then screen copy back,16,SELY,208,SELY+SELTY to 13,80,0 : screen copy 13,16,SELY,96,SELY+SELTY to 13,0,0 : X1=80 : X2=0 : ST=-4
3625 if DX>0 then screen copy back,16,SELY,208,SELY+SELTY to 13,0,0 : screen copy 13,208-80,SELY,208,SELY+SELTY to 13,192,0 : X1=0 : X2=80 : ST=4
3630 show on : for XX=X1 to X2 step ST : timer=0
3635 screen copy 13,XX,0,XX+192,SELTY to back,16,SELY : wait vbl : screen copy back,16,SELY,208,SELY+SELTY to logic,16,SELY
3640 next XX : hide on 
3645 return 
3997 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3998 rem              BLOCS
3999 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
4000 M=0 : gosub 10700 : REDO=0 : NOJUMP=true : REDO=false : gosub 10500
4005 goto 4100
4049 rem > Return to main menu
4050 M=0 : gosub 10700 : sprite off 2 : if REDO then gosub 10350 : gosub 10000
4055 goto 3450
4074 rem Set bloc center
4099 rem > Draw with bloc
4100 if BLOCON=0 then 4200
4104 gosub 4900 : REDO=true
4105 gosub 10300
4110 repeat : gosub 10100 : if KM=2 then 4050
4111 if Z<>50 then 4130
4115 cls 13,0,160,100 to 160+TX,100+TY : screen$(13,160,100)=SP$
4116 auto back off : logic=13 : back=13
4117 if BLOCOP then set paint 1,1,1 : ink 0 : bar 160+XS-BLOCHX,100+YS-BLOCHY to 160+XS-BLOCHX+BLOCX2-BLOCX1,100+YS-BLOCHY+BLOCY2-BLOCY1
4120 sprite off 1 : sprite 2,160+XS,100+YS,13 : update : sprite off 2 : update : logic=physic : back=default back : sprite 1,XM,YM,1 : update 
4125 screen copy 13,160,100,160+TX,100+TY to back,XSPR,YSPR : screen copy 13,160,100,160+TX,100+TY to logic,XSPR,YSPR : gosub 10000
4130 OLDXS=XS : OLDYS=YS : OLDKM=KM : until KM
4135 goto 4105
4199 rem > GET BLOC
4200 BLOCON=false : gosub 4900 : gosub 10500
4205 gosub 10300 : REDO=false
4210 repeat : gosub 10100 : until KM : if KM=2 then 4050
4215 X1=XS : Y1=YS : BLOCINK=1 : REDO=true
4220 repeat : if XS>=X1 then X2=XS
4225 if YS>=Y1 then Y2=YS
4230 cls 13,0,160,100 to 160+TX,100+TY : screen$(13,160,100)=SP$
4235 set line $FFFF,1,0,0 : auto back off : ink BLOCINK : logic=13 : box 160+X1,100+Y1 to 160+X2,100+Y2
4240 logic=physic : screen copy 13,160,100,160+TX,100+TY to back,XSPR,YSPR : screen copy 13,160,100,160+TX,100+TY to logic,XSPR,YSPR
4245 gosub 10000 : BLOCINK=(BLOCINK+1) mod 16
4250 gosub 10100 : until KM=0
4255 gosub 10350
4260 screen copy back,XSPR,YSPR,XSPR+TX,YSPR+TY to 13,160,100
4265 logic=13 : back=13 : auto back off : ink 0 : set paint 1,1,1
4270 bar 155,95 to 160+X1-1,170 : bar 160+X2+1,95 to 230,170
4275 bar 155,95 to 230,100+Y1-1 : bar 160,100+Y2+1 to 230,170
4280 poke start(1)+ADBLOC+6,0 : poke start(1)+ADBLOC+7,0 : get sprite 160,100,13 : logic=physic : back=default back
4285 BLOCX1=X1 : BLOCX2=X2 : BLOCY1=Y1 : BLOCY2=Y2 : BLOCENT=0 : gosub 4925
4290 BLOCON=true : if BLOCOF=false then 4100
4291 screen copy back,XSPR,YSPR,XSPR+TX,YSPR+TY to 13,160,100 : logic=13 : back=13 : auto back off 
4292 set paint 1,1,1 : ink CURINK(2) : bar 160+X1,100+Y1 to 160+X2,100+Y2 : logic=physic : back=default back
4293 screen copy 13,160,100,160+TX,100+TY to back,XSPR,YSPR : screen copy 13,160,100,160+TX,100+TY to logic,XSPR,YSPR : gosub 10000
4294 goto 4100
4295 end 
4299 rem > Transparent/Opaque
4300 BLOCOP=not(BLOCOP)
4305 gosub 4900
4310 if BLOCON then 4100
4315 goto 4200
4399 rem > Take away origin zone On/Off
4400 BLOCOF=not(BLOCOF)
4405 gosub 4900
4410 if BLOCON then 4100
4415 goto 4200
4499 rem > Centre bloc
4500 BLOCENT=0 : gosub 4925 : goto 4405
4599 rem > Bloc 1
4600 BLOCENT=1 : gosub 4925 : goto 4405
4699 rem > Bloc 2
4700 BLOCENT=2 : gosub 4925 : goto 4405
4799 rem > Bloc 3
4800 BLOCENT=3 : gosub 4925 : goto 4405
4899 rem Redraw left menu bar
4900 unpack 11,13 : screen copy 13,1*32,0,1*32+32,145 to back,0,0 : MENNB=1
4901 logic=back : auto back off 
4902 if BLOCON then M=1 else M=2
4905 gosub 10705 : if BLOCOP then M=3 : gosub 10705
4910 if BLOCOF then M=4 : gosub 10705
4915 M=5+BLOCENT : gosub 10705
4920 logic=physic : screen copy back,0,0,32,145 to logic,0,0 : return 
4924 rem Set bloc center
4925 if BLOCENT=0 then X=BLOCX2 : Y=BLOCY2
4926 if BLOCENT=1 then X=BLOCX1 : Y=BLOCY1
4930 if BLOCENT=2 then X=BLOCX2 : Y=BLOCY1
4935 if BLOCENT=3 then X=BLOCX1 : Y=BLOCY2
4940 poke start(1)+ADBLOC+6,X : poke start(1)+ADBLOC+7,Y : BLOCHX=X-BLOCX1 : BLOCHY=Y-BLOCY1 : return 
4997 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
4998 rem         GRAB FROM PROGRAM
4999 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
5000 M=3 : gosub 10700 : gosub 10300
5005 S$="" : T$(1)="GRAB PRG" : gosub 10900 : gosub 11000
5010 MENNB=4 : gosub 10600
5015 repeat : gosub 10100 : until KM=2
5050 M=0 : gosub 10700 : S$="" : if length(10)=0 then reserve as screen 10 : IMAGELD=0 : FLAGBACK=0
5055 for X=1 to 49 : reset zone X : next X : goto 3450
5099 rem > Select file name
5100 FLG=1
5101 M=7 : TMEN=2 : gosub 10700 : gosub 11700 : on error goto 5102 : drive=DRIVGRAB : dir$=PATHGRAB$ : goto 5104
5102 resume 5103
5103 on error goto 5155 : dir$="\"
5104 on error goto 0 : FILTER$=".*" : T$="      GRAB FROM A PROGRAM" : T=1 : gosub 11200
5105 if F$="" then 5005
5110 FILEGRAB$=F$ : DRIVGRAB=drive : gosub 11700 : PATHGRAB$=A$
5115 DGRAB=0 : TXGRAB=20 : TYGRAB=200 : PFGRAB=0
5120 M=7 : TMEN=2 : gosub 10700 : on FLG goto 5200,5215
5150 resume 5155
5155 on error goto 0 : boom : FILEGRAB$="" : PATHGRAB$="" : gosub 10900 : T$(1)="Disc error" : gosub 11000 : wait 200 : goto 5005
5199 rem > Grab from program
5200 M=1 : TMEN=6 : gosub 10700 : FLG=2
5205 if FILEGRAB$="" then 5101
5215 if free+32768<65536 then boom : T$(0)="Not" : T$(1)="enough" : T$(2)="memory!" : gosub 10900 : gosub 11000 : wait 200 : goto 5005
5220 sprite off : update : erase 10 : IMAGELD=0 : XGRAB=48 : YGRAB=132 : gosub 11600
5221 on error goto 5222 : gosub 11700 : drive=DRIVGRAB : dir$=PATHGRAB$ : goto 5225
5222 resume 5223
5223 sprite off 1 : update : auto back on : paper 0 : pen 1 : windopen 1,0,8,40,7,5 : locate 1,2 : centre "Change disk and press mouse key." : show on : while mouse key : wend : repeat : until mouse key : windel 1 : hide on 
5224 gosub 11700 : on error goto 5275 : drive=DRIVGRAB : dir$=PATHGRAB$
5225 on error goto 5275 : open in #1,FILEGRAB$ : pof(1)=PFGRAB : S$=string$(chr$(0),48000) : mid$(S$,1)=input$(#1,min(lof(1),16000))
5226 if pof(1)<lof(1) then mid$(S$,16001)=input$(#1,min(16000,lof(1)-pof(1)))
5227 if pof(1)<lof(1) then mid$(S$,32001)=input$(#1,min(16000,lof(1)-pof(1)))
5229 on error goto 0
5235 BON=1 : gosub 5900
5240 XM=x mouse : YM=y mouse : KM=mouse key : sprite 1,XM,YM,1 : update : Z=zone(1)
5245 if KM=2 then 5800
5250 if KM<>1 then 5240
5255 if Z=0 or Z>15 then 5240
5260 on Z gosub 5300,5310,5400,5450,5455,5475,5500,5505,5510,5515,5520,5525,5530,5535
5265 goto 5240
5274 rem > Loading error
5275 resume 5280
5280 on error goto 0 : S$="" : boom : gosub 10850 : T$(1)="Disk error" : gosub 11000 : wait 200 : goto 5005
5285 goto 5010
5299 rem > Save NEO
5300 FILTER$=".NEO" : T$="        Save a NEO picture" : goto 5311
5305 rem > Save DEGAS
5310 FILTER$=".PI1" : T$="        Save a DEGAS picture"
5311 gosub 11700 : on error goto 5312 : drive=DRIVPIC : dir$=PATHPIC$ : goto 5319
5312 resume 5313
5313 sprite off 1 : update : auto back on : paper 0 : pen 1 : windopen 1,0,8,40,7,5 : locate 1,2 : centre "Change disk and press mouse key." : show on : while mouse key : wend : repeat : until mouse key : windel 1 : hide on 
5314 on error goto 5315 : drive=DRIVPIC : gosub 11700 : dir$=PATHPIC$ : goto 5319
5315 resume 5316
5316 dir$="\"
5319 on error goto 5375 : clw : cls logic : cls back : sprite off : update : show on 
5320 F$=file select$("*"+FILTER$,T$,3) : gosub 11700 : PATHPIC$=A$ : DRIVPIC=drive
5325 if F$="" then 5345
5330 if instr(F$,".")=0 then F$=F$+FILTER$
5335 if instr(F$,FILTER$)=0 then 5345
5340 BON=0 : gosub 5900 : save F$,back
5345 on error goto 5346 : drive=DRIVGRAB : gosub 11700 : dir$=PATHGRAB$ : goto 5350
5346 resume 5348
5348 sprite off 1 : update : auto back on : paper 0 : pen 1 : windopen 1,0,8,40,7,5 : curs off : locate 1,2 : centre "Change disk and press mouse key." : show on : while mouse key : wend : repeat : until mouse key : windel 1 : hide on 
5349 on error goto 5375 : drive=DRIVGRAB : gosub 11700 : dir$=PATHGRAB$
5350 on error goto 0 : hide on : BON=1 : gosub 5900 : return 
5375 pop : resume 5280
5399 rem > QUIT
5400 S$="" : close 
5405 MENNB=4 : OLDTX=-1 : fade 1 : wait 8 : cls logic : cls back : gosub 10850
5410 pop : goto 5005
5449 rem > Reduce / increase TX
5450 DX=-1 : goto 5460
5455 DX=1
5460 if TXGRAB+DX>0 and TXGRAB+DX<=20 then TXGRAB=TXGRAB+DX : gosub 5900
5465 return 
5474 rem > FULL
5475 TXGRAB=20 : gosub 5900 : return 
5499 rem > Up one/10 lines
5500 D=-TXGRAB*10*8 : goto 5550
5505 D=-TXGRAB*8 : goto 5550
5510 D=TXGRAB*8 : goto 5550
5515 D=TXGRAB*10*8 : goto 5550
5520 D=-8 : goto 5550
5525 D=-1 : goto 5550
5530 D=1 : goto 5550
5535 D=8 : goto 5550
5550 if D>0 then 5580
5555 if DGRAB+D>=PFGRAB then DGRAB=D+DGRAB : gosub 5900 : return 
5560 if PFGRAB=0 then return 
5565 copy varptr(S$),varptr(S$)+32000 to varptr(S$)+16000 : fill varptr(S$) to varptr(S$)+16000,0 : PFGRAB=PFGRAB-16000 : if PFGRAB>=lof(1) then 5575
5570 on error goto 5750 : pof(1)=PFGRAB : mid$(S$,1)=input$(#1,min(16000,lof(1)-pof(1))) : on error goto 0
5575 DGRAB=DGRAB+D : gosub 5900 : return 
5580 if D+DGRAB<PFGRAB+16000 then DGRAB=D+DGRAB : gosub 5900 : return 
5585 if PFGRAB+48000>=lof(1)+32000 then return 
5590 copy varptr(S$)+16000,varptr(S$)+48000 to varptr(S$) : fill varptr(S$)+32000 to varptr(S$)+48000,0 : PFGRAB=PFGRAB+16000 : if PFGRAB+48000>=lof(1) then 5605
5595 on error goto 5750
5600 pof(1)=PFGRAB+32000 : mid$(S$,32001)=input$(#1,min(lof(1)-pof(1),16000)) : on error goto 0
5605 DGRAB=DGRAB+D : gosub 5900 : return 
5749 rem > Load error
5750 pop : resume 5280
5800 sprite off 1 : update : BON=0 : gosub 5900 : screen copy back to 13 : show on : while mouse key : wend 
5805 repeat : KM=mouse key : until KM : if KM=2 then hide on : goto 5235
5810 X1=x mouse : Y1=y mouse : X2=X1 : Y2=Y1 : set line $FFFF,1,0,0 : auto back on : gr writing 1 : FLINK=0
5815 repeat : KM=mouse key : XM=x mouse : YM=y mouse : if KM=2 then 5235
5820 if XM>X1 then X2=min(X1+63,XM)
5825 if YM>Y1 then Y2=min(Y1+63,YM)
5830 auto back off : ink FLINK : box X1,Y1 to X2,Y2 : wait 3 : screen copy 13,X1 and $FFF0,Y1,X2+16,Y2+1 to back,X1,Y1 : screen copy 13,X1 and $FFF0,Y1,X2+16,Y2+1 to logic,X1,Y1
5835 FLINK=(FLINK+1) mod 16 : until KM=0 : IX=X2-X1 : IY=Y2-Y1
5840 repeat : XM=x mouse : YM=y mouse : KM=mouse key : if KM=2 then while mouse key : wend : goto 5805
5845 X1=XM-IX : if X1<0 then X1=0
5850 Y1=YM-IY : if Y1<0 then Y1=0
5855 auto back off : ink FLINK : box X1,Y1 to X1+IX,Y1+IY : wait 3 : screen copy 13,X1 and $FFF0,Y1,X1+IX+16,Y1+IY+1 to back,X1,Y1 : screen copy 13,X1 and $FFF0,Y1,X1+IX+16,Y1+IY+1 to logic,X1,Y1
5860 FLINK=(FLINK+1) mod 16 : until KM : TX=IX+1 : TY=IY+1
5865 S$="" : screen copy back,X1,Y1,X1+TX+16,Y1+TY to 13,160,100
5870 if (TX and 15)<>0 then set paint 1,1,1 : ink 0 : gr writing 1 : logic=13 : auto back off : bar 160+TX,100 to 319,199 : logic=physic : TX=(TX+16) and $FFF0
5875 SP$=screen$(13,160,100 to 160+TX,100+TY) : gosub 9200
5880 MENNB=4 : OLDTX=-1 : gosub 10850
5885 close : goto 5005
5899 rem > Draw screen and command box
5900 cls back : areg(1)=varptr(S$)+DGRAB-PFGRAB : areg(2)=back : dreg(0)=5 : dreg(1)=TXGRAB : dreg(2)=TYGRAB : call 15
5905 logic=back : auto back off : if TXGRAB<20 then auto back off : set line $FFFF,1,0,0 : draw TXGRAB*16,0 to TXGRAB*16,199
5910 if BON=0 then 5925
5915 unpack 9,back,XGRAB,YGRAB
5920 paper 0 : pen 1 : locate XGRAB/8+1,YGRAB/8+1 : print FILEGRAB$ : locate XGRAB/8+1,YGRAB/8+2 : print "P:";DGRAB; : locate XGRAB/8+11,YGRAB/8+2 : print "W:";TXGRAB;
5925 logic=physic : screen copy back to logic : redraw : return 
5997 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
5998 rem         GRAB FROM PICTURE
5999 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
6000 M=2 : gosub 10700
6005 gosub 6900 : REDO=0 : NOJUMP=true : REDO=false : gosub 10500
6010 repeat : gosub 10100 : until KM=2
6050 M=0 : gosub 10700 : goto 3450
6099 rem > GRAB
6100 M=1 : TMEN=3 : gosub 10700 : if IMAGELD=0 then 6405
6105 gosub 10300 : wait 20 : sprite off : update : cls logic : cls back
6110 if IMAGEPAL then get palette (10) : wait vbl : for X=0 to 15 : PAL(X)=colour(X) : next X
6115 for X=0 to 15 : colour X,PAL(X) : next X : screen copy 10 to back : screen copy 10 to logic : show on 
6125 repeat : KM=mouse key : until KM : if KM=2 then 6200
6126 XM=x mouse : if BY16 then XM=XM and $FFF0
6130 X1=XM : Y1=y mouse : X2=X1 : Y2=Y1 : set line $FFFF,1,0,0 : auto back on : gr writing 1 : FLINK=0
6135 repeat : KM=mouse key : XM=x mouse : YM=y mouse : if KM=2 then 6200
6136 if BY16 then XM=((XM+8) and $FFF0)-1
6140 if XM>X1 then X2=min(X1+63,XM)
6145 if YM>Y1 then Y2=min(Y1+63,YM)
6150 ink FLINK : box X1,Y1 to X2,Y2 : wait 3 : screen copy 10,X1 and $FFF0,Y1,X2+16,Y2+1 to back,X1,Y1 : screen copy 10,X1 and $FFF0,Y1,X2+16,Y2+1 to logic,X1,Y1
6155 FLINK=(FLINK+1) mod 16 : until KM=0 : IX=X2-X1 : IY=Y2-Y1
6160 repeat : XM=x mouse : YM=y mouse : KM=mouse key : if KM=2 then 6200
6161 if BY16 then XM=((XM+8) and $FFF0)-1
6165 X1=XM-IX : if X1<0 then X1=0
6170 Y1=YM-IY : if Y1<0 then Y1=0
6175 ink FLINK : box X1,Y1 to X1+IX,Y1+IY : wait 3 : screen copy 10,X1 and $FFF0,Y1,X1+IX+16,Y1+IY+1 to back,X1,Y1 : screen copy 10,X1 and $FFF0,Y1,X1+IX+16,Y1+IY+1 to logic,X1,Y1
6180 FLINK=(FLINK+1) mod 16 : until KM : TX=IX+1 : TY=IY+1
6185 screen copy back,X1,Y1,X1+TX+16,Y1+TY to 13,160,100
6190 if (TX and 15)<>0 then set paint 1,1,1 : ink 0 : gr writing 1 : logic=13 : auto back off : bar 160+TX,100 to 319,199 : logic=physic : TX=(TX+16) and $FFF0
6195 SP$=screen$(13,160,100 to 160+TX,100+TY) : gosub 9200
6200 MENNB=3 : OLDTX=-1 : gosub 10850 : if INSOTAU then gosub 9705
6205 goto 6005
6399 rem > Load NEO
6400 M=6 : gosub 10700 : FILTER$=".NEO" : T$=" --->  Load a NEO picture  <---" : goto 6406
6404 rem > Load DEGAS
6405 M=7 : gosub 10700 : FILTER$=".PI1" : T$=" ---> Load a DEGAS picture <---"
6406 gosub 11700 : on error goto 6407 : drive=DRIVGRABI : dir$=PATHGRABI$ : goto 6410
6407 resume 6408
6408 dir$="\"
6410 on error goto 6450
6415 T=5 : gosub 11200
6417 if F$="" then 6005
6418 on error goto 6450
6419 gosub 11700 : PATHGRABI$=A$ : DRIVGRABI=drive : load F$,10
6420 on error goto 0
6425 IMAGELD=true : FLAGBACK=0 : goto 6100
6450 resume 6455
6455 on error goto 0 : boom : gosub 10900 : T$(1)="Disk error" : gosub 11000 : wait 200 : goto 6005
6499 rem > Change/not palette
6500 IMAGEPAL=not(IMAGEPAL) : goto 6005
6599 rem > 16*16
6600 BY16=not(BY16) : goto 6005
6699 rem > Auto insertion
6700 INSOTAU=not(INSOTAU) : goto 6005
6805 repeat : KM=mouse key : until KM : if KM=2 then 6200
6899 rem Left grab menu
6900 MENNB=3 : unpack 11,13 : screen copy 13,MENNB*32,0,MENNB*32+32,145 to back,0,0
6905 logic=back : auto back off : if IMAGEPAL then M=8 : gosub 10705
6906 if BY16 then M=4 : gosub 10705
6907 if INSOTAU then M=5 : gosub 10705
6910 gosub 4920 : gosub 10900 : T$(0)="Grab " : T$(1)="from " : T$(2)="pictures" : gosub 11000
6915 return 
6997 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
6998 rem            ANIMATIONS
6999 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
7000 M=1 : gosub 10700 : gosub 10300 : if SPRNB=0 then bell : T$(1)="No" : T$(2)="sprites!" : gosub 10900 : gosub 11000 : wait 50 : goto 3450
7005 if free<16384+1024*6 then boom : T$(0)="Not" : T$(1)="enough" : T$(2)="memory!" : gosub 10900 : gosub 11000 : wait 100 : goto 3450
7010 FRWD=1 : gosub 7900
7015 reserve as work 8,max(16384,min(free-1024*6,32768))
7020 for X=0 to SPRNB-1 : loke start(8)+X*8,0 : poke start(8)+X*8+4,TX(X)/16 : poke start(8)+X*8+5,TY(X) : poke start(8)+X*8+6,HX(X) : poke start(8)+X*8+7,HY(X) : next X
7025 loke start(1)+4,start(8)-start(1)-4 : doke start(1)+16,SPRNB : update on : N=ANINB : gosub 7305 : show on : goto 7100
7049 rem > MAIN
7050 M=0 : gosub 10700 : anim off : sprite off : update : gosub 7325 : loke start(1)+4,$12 : doke start(1)+16,14 : erase 8 : update off 
7055 for X=1 to 25 : reset zone X : next X
7060 MENNB=0 : gosub 10850 : goto 3450
7099 rem > Anim loop
7100 Z=zone(0) : XM=x mouse : YM=y mouse : KM=mouse key : if KM=0 then 7100
7105 if KM=2 then 7050
7110 if Z>=86 and Z<=91 then hide on : gosub 3600+Z-86 : show on : goto 7100
7115 if Z>=52 and Z<=60 then if LEFTAD(MENNB,Z-52) then while mouse key : wend : gosub LEFTAD(MENNB,Z-52) : goto 7100 else gosub 7325 : N=Z-52-1 : gosub 7300 : while mouse key : wend : goto 7100
7120 if Z=92 then gosub 7150 : goto 7100
7125 if Z>=1 and Z<=11 then on Z gosub 7250,7200,7202,7205,7255,7400,7450,7425,7700,7600,7605 : goto 7100
7130 if Z=12 then gosub 7225 : goto 7100
7135 if Z=13 then gosub 7350 : goto 7100
7145 goto 7100
7149 rem > Plus one sprite
7150 S=SPRCUR : if XM<16+56 then dec S
7151 if XM>16+64+72 then inc S
7152 if S<0 or S>=SPRNB then return 
7153 if ANISUP>ANICUR then for X=ANISUP to ANICUR+1 step-1 : ANIS(X)=ANIS(X-1) : ANIV(X)=ANIV(X-1) : next X
7155 ANIS(ANICUR)=S : ANIV(ANICUR)=ANIV : if ANISUP<15 then inc ANISUP
7156 if ANICUR=ANISUP-1 and ANICUR<>15 then inc ANICUR
7157 gosub 7960 : gosub 7500 : gosub 7550 : while mouse key : wend : return 
7159 rem > Delete
7160 if ANISUP=0 then bell : return 
7161 if ANISUP<>ANICUR then for X=ANICUR to ANISUP-1 : ANIS(X)=ANIS(X+1) : ANIV(X)=ANIV(X+1) : next X : dec ANISUP else dec ANISUP : dec ANICUR
7165 auto back off : paper 0 : pen 1 : for Y=0 to 3 : locate ANIXST,ANIYST+Y : print space$(34); : next Y : gosub 7960 : gosub 7500 : gosub 7550
7170 return 
7174 rem > Delete all inputs
7175 ANISUP=0 : ANICUR=0 : goto 7165
7199 rem > Set speed down/up
7200 D=-1 : goto 7210
7202 D=0 : goto 7210
7205 D=1
7210 if ANIV+D<1 or ANIV+D>49 then return 
7215 timer=0 : ANIV=ANIV+D : gosub 7970 : if ANICUR<ANISUP then X=ANICUR : ANIV(X)=ANIV : gosub 7990 : gosub 7550
7220 if timer<5 then 7220
7221 return 
7224 rem > Select animation
7225 X=(XM-xgraphic(ANIXST))/64+((YM-ygraphic(ANIYST))/8)*4 : if X>ANISUP or X<0 then return 
7230 swap X,ANICUR : gosub 7990 : X=ANICUR : gosub 7990 : return 
7249 rem > Set speed
7250 D=-1 : goto 7260
7255 D=1
7260 if ANISUP=0 then return 
7265 timer=0 : for X=0 to ANISUP-1 : if ANIV(X)+D>0 and ANIV(X)+D<50 then next X : for X=0 to ANISUP-1 : ANIV(X)=ANIV(X)+D : next X
7270 gosub 7960 : gosub 7550
7275 if timer<5 then 7275
7280 return 
7299 rem > Select anim
7300 M=ANINB+1 : gosub 10700 : M=N+1 : gosub 10700
7305 ANISUP=ANISUP(N) : ANICUR=ANICUR(N) : ANIV=ANIVV(N) : for X=0 to 15 : ANIS(X)=ANISP(N,X) : ANIV(X)=ANIVIT(N,X) : next X : ANINB=N : if FRWD=0 then M=6 : gosub 7950
7310 FRWD=1 : auto back off : paper 0 : pen 1 : for Y=0 to 3 : locate ANIXST,ANIYST+Y : print space$(34); : next Y : gosub 7960 : gosub 7500 : gosub 7550
7315 return 
7324 rem > Stores current anim
7325 ANISUP(ANINB)=ANISUP : ANICUR(ANINB)=ANICUR : ANIVV(ANINB)=ANIV
7330 for X=0 to 15 : ANIVIT(ANINB,X)=ANIV(X) : ANISP(ANINB,X)=ANIS(X) : next X
7335 return 
7349 rem > Place sprite
7350 ANIXSP(ANINB)=XM : ANIYSP(ANINB)=YM : if ANISUP>0 then sprite 1,XM,YM
7355 return 
7399 rem > Backward
7400 if FRWD then M=8 : gosub 7950 : M=6 : gosub 7950 : FRWD=0 : gosub 7550
7405 return 
7424 rem > Forward
7425 if FRWD=0 then M=6 : gosub 7950 : M=8 : gosub 7950 : FRWD=1 : gosub 7550
7430 return 
7449 rem > Step by step
7450 if ANISUP=0 then bell : return 
7455 M=7 : gosub 7950 : synchro off 
7460 OLDC=ANICUR : OLDA=OLDC : ANICUR=0 : if FRWD=0 then ANICUR=ANISUP-1
7465 repeat : X=OLDA : gosub 7990 : X=ANICUR : gosub 7990 : OLDA=ANICUR : sprite 1,ANIXSP(ANINB),ANIYSP(ANINB),ANIS(ANICUR)+1 : while mouse key : wend : repeat : KM=mouse key : until KM : Z=zone(0)
7470 if KM=2 then 7495
7475 if Z>=52 and Z<=58 then 7495
7480 if Z=6 then gosub 7400
7482 if Z=8 then gosub 7425
7486 if FRWD then inc ANICUR : if ANICUR>=ANISUP then ANICUR=0
7488 if FRWD=0 then dec ANICUR : if ANICUR<0 then ANICUR=ANISUP-1
7490 until Z=7
7495 ANICUR=OLDC : X=OLDA : gosub 7990 : X=ANICUR : gosub 7990 : M=7 : gosub 7950 : synchro on : while mouse key : wend : return 
7499 rem > Poke pseudo sprites bank
7500 anim off : sprite off : update : if ANISUP=0 then return 
7505 AB=start(8)+SPRNB*8
7510 for X=0 to ANISUP-1
7515 if X=0 then 7525 else for Y=0 to X-1 : if ANIS(X)=ANIS(Y) then 7535
7520 next Y
7525 L=((len(S$(ANIS(X)))-8)*5)/4 : if AB+L>start(8)+length(8) then bell : loke start(8)+ANIS(X)*8,start(8)+SPRNB*8 : loke start(8)+ANIS(X)*8+4,leek(start(8)+SPRNB*8+4) : goto 7535
7530 loke start(8)+ANIS(X)*8,AB-start(8) : areg(1)=varptr(S$(ANIS(X))) : areg(2)=AB : dreg(0)=4 : call 15 : AB=AB+L
7535 next X : return 
7549 rem > Start animation
7550 if ANISUP=0 then return 
7555 if FRWD then sprite 1,ANIXSP(ANINB),ANIYSP(ANINB),ANIS(0) : anim 1,AN$+"L" : anim on : return 
7560 A$="" : for X=ANISUP-1 to 0 step-1 : A$=A$+mid$(AN$,X*8+1,8) : next X : sprite 1,ANIXSP(ANINB),ANIYSP(ANINB),ANIS(ANISUP-1) : anim 1,A$+"L" : anim on : return 
7599 rem > Load NEO
7600 FILTER$=".NEO" : T$=" --->  Load a NEO picture  <---" : M=10 : goto 7615
7605 rem > Load DEGAS
7610 FILTER$=".PI1" : T$=" ---> Load a DEGAS picture <---" : M=11
7615 gosub 7950 : gosub 11700 : on error goto 7620 : drive=DRIVBACK : dir$=PATHBACK$ : goto 7630
7620 resume 7625
7625 dir$="\"
7630 anim off : sprite off : update : on error goto 7650 : T=5 : gosub 11200 : if F$="" then 7640
7635 on error goto 7650 : gosub 11700 : PATHBACK$=A$ : DRIVBACK=drive : load F$,10 : FLAGBACK=true : IMAGELD=0
7640 on error goto 0 : gosub 7950 : gosub 7550 : show on : return 
7650 boom : resume 7640
7699 rem > Display background
7700 M=9 : gosub 7950 : if FLAGBACK=0 then gosub 7605
7705 if FLAGBACK=0 then M=9 : gosub 7950 : return 
7710 screen copy 10 to back : screen copy 10 to logic : get palette (10) : hide on : redraw : FRWD=1 : gosub 7550
7715 while mouse key : wend : repeat : wait vbl : sprite 1,x mouse,y mouse : wait vbl : until mouse key
7720 fade 1 : wait 8 : anim off : sprite off : update : unpack 14 : gosub 7900 : gosub 11300 : gosub 11375 : gosub 7550 : gosub 7960 : show on 
7725 fade 4,PAL(0),PAL(1),PAL(2),PAL(3),PAL(4),PAL(5),PAL(6),PAL(7),PAL(8),PAL(9),PAL(10),PAL(11),PAL(12),PAL(13),PAL(14),PAL(15)
7730 return 
7899 rem > Draw animation screen
7900 sprite off 1 : update : cls back,0,32,0 to 320,ANIHY
7905 unpack 11,13 : MENNB=2 : screen copy 13,MENNB*32,0,MENNB*32+32,145 to back,0,0
7910 unpack 7,13,0,0 : screen copy 13,0,0,96,200-ANIHY to back,224,ANIHY
7915 screen copy back to logic : M=8 : gosub 7950
7920 for X=1 to 11 : set zone X,ANIX1(X),ANIY1(X) to ANIX2(X),ANIY2(X) : next X
7925 paper 0 : pen 1 : locate ANIXST+9,ANIYST-1 : print "Animation string"; : set zone 12,xgraphic(ANIXST),ygraphic(ANIYST) to xgraphic(ANIXST+32),ygraphic(ANIYST+4) : set zone 13,32,0 to 319,ygraphic(ANIYST-2)
7930 M=ANINB+1 : gosub 10700 : return 
7949 rem > Set to white
7950 auto back on : gr writing 3 : set paint 1,1,0 : ink 1 : bar ANIX1(M),ANIY1(M) to ANIX2(M),ANIY2(M) : gr writing 1 : return 
7959 rem > Print and creates anim string
7960 auto back off : paper 0 : pen 1 : inverse off 
7965 AN$=space$(16*8) : for X=0 to ANISUP : gosub 7990 : next X
7970 locate ANIXTV,ANIYTV : print using "##";ANIV; : return 
7989 rem > Print and creates ONE anim phase
7990 if X<ANISUP then mid$(AN$,X*8+1)="        " : mid$(AN$,X*8+1)="("+(str$(ANIS(X)+1)-" ")+","+(str$(ANIV(X))-" ")+")"
7991 paper 0 : pen 1 : inverse off : if X=ANICUR then inverse on 
7992 if X<4 then locate ANIXST+X*8,ANIYST : if X<ANISUP then print using "(###,";ANIS(X)+1; using "##)";ANIV(X); : inverse off : return else 7996
7993 if X<8 then locate ANIXST+(X-4)*8,ANIYST+1 : if X<ANISUP then print using "(###,";ANIS(X)+1; using "##)";ANIV(X); : inverse off : return else 7996
7994 if X<12 then locate ANIXST+(X-8)*8,ANIYST+2 : if X<ANISUP then print using "(###,";ANIS(X)+1; using "##)";ANIV(X); : inverse off : return else 7996
7995 locate ANIXST+(X-12)*8,ANIYST+3 : if X<ANISUP then print using "(###,";ANIS(X)+1; using "##)";ANIV(X); : inverse off : return 
7996 if X<16 then print "        ";
7997 inverse off : return 
7998 rem              FILE
7999 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
8000 M=4 : gosub 10700
8005 MENNB=5 : unpack 11,13 : screen copy 13,MENNB*32,0,MENNB*32+32,145 to back,0,0
8010 logic=back : auto back off 
8015 if FILEPAL then M=1 : gosub 10705
8020 logic=physic : screen copy back,0,0,32,145 to logic,0,0
8025 REDO=false : NOJUMP=true : gosub 10900 : T$(0)="FILE" : T$(2)="Bank size:" : T$(3)=(str$(BANKSIZE)-" ")+" " : gosub 11000
8030 repeat : gosub 10100 : until KM=2
8050 M=0 : gosub 10700 : goto 3450
8099 rem > Get palette ON/OFF
8100 FILEPAL=FILEPAL xor 1 : goto 8005
8199 rem > LOAD
8200 M=2 : gosub 10700
8201 A$=dir first$("*.*",-1)
8202 FILTER$=".MBK" : T$="       LOAD a sprites bank" : T=10 : gosub 11200
8204 if F$="" then 8005
8206 swap F$,FILENAME$ : gosub 11400 : gosub 11300 : gosub 11375 : gosub 10900 : T$(0)="Loading " : gosub 11000 : FLGMERGE=0
8208 gosub 11700 : PATHSAVE$=A$ : DRIVSAVE=drive : on error goto 8275
8210 PAL$="" : open in #1,FILENAME$
8212 if lof(1)>SPRMAXBANK then boom : close : goto 8005
8214 A$=input$(#1,18) : if left$(A$,10)<>"Lionpoubnk" then boom : close : goto 8005
8216 A$=input$(#1,22) : if leek(varptr(A$))<>$19861987 then boom : close : goto 8005
8218 if FLGMERGE=0 then DMIDHI=leek(varptr(A$)+12)-leek(varptr(A$)+8) : NSMID=deek(varptr(A$)+18) : NSHI=deek(varptr(A$)+20)
8219 NS=deek(varptr(A$)+16) : if NS=0 then A=leek(varptr(A$)+8) : if A+4+18>pof(1) then PAL$=input$(#1,A+4+18-pof(1)) : goto 8234 else 8234
8220 locate OPXT,OPYT+3 : print "Out of";NS;
8222 if SPRNB+NS>SPRMAXNB then boom : close : goto 8005
8224 MAP$=input$(#1,NS*8) : A=leek(varptr(MAP$)) : if A+18+22>pof(1) then PAL$=input$(#1,A+18+22-pof(1))
8226 for N=0 to NS-1 : locate OPXT,OPYT+2 : print "Number";N+1; : IX=peek(varptr(MAP$)+N*8+4) : IY=peek(varptr(MAP$)+N*8+5)
8228 A$=input$(#1,IX*IY*2) : A$=input$(#1,IX*IY*4*2) : S$(SPRNB+N)=SCRCODE$+chr$((IX*16)/256)+chr$((IX*16) mod 256)+chr$(0)+chr$(IY)+A$
8230 TX(SPRNB+N)=IX*16 : TY(SPRNB+N)=IY : HX(SPRNB+N)=peek(varptr(MAP$)+N*8+6) : HY(SPRNB+N)=peek(varptr(MAP$)+N*8+7)
8232 next N : A$="" : MAP$=""
8234 if FLGMERGE=0 then if pof(1)<lof(1) and (NSMID<>0 or NSHI<>0) then OTHER$=input$(#1,lof(1)-pof(1))
8236 close : on error goto 0 : SPRNB=SPRNB+NS
8238 if FILEPAL then if PAL$<>"" then if leek(varptr(PAL$))=CODEPAL then for X=0 to 15 : PAL(X)=deek(varptr(PAL$)+4+X*2) : colour X,PAL(X) : next X
8240 ST$="" : gosub 11300 : gosub 11375 : gosub 11500
8245 if FLGMERGE then swap F$,FILENAME$
8250 FLGMERGE=0 : goto 8005
8275 resume 8280
8280 for X=SPRNB to SPRMAXNB : S$(X)="" : TX(X)=0 : TY(X)=0 : HX(X)=0 : HY(X)=0 : next X : swap F$,FILENAME$
8285 on error goto 0 : boom : close : gosub 10900 : T$(1)="Disc error" : gosub 11000 : wait 200 : goto 8005
8299 rem > APPEND
8300 M=3 : gosub 10700
8305 paper 1 : pen 0 : FILTER$=".MBK" : T$="      APPEND a sprite bank" : T=9 : gosub 11200
8310 if F$="" then 8005
8315 SPRCUR=SPRNB : gosub 11300 : gosub 11375 : gosub 10900 : T$(0)="Adding " : gosub 11000
8320 FLGMERGE=true : swap F$,FILENAME$ : goto 8208
8399 rem > SAVE
8400 M=4 : gosub 10700 : if FILENAME$="" then 8505
8401 gosub 11700
8402 on error goto 8403 : drive=DRIVSAVE : dir$=PATHSAVE$ : on error goto 0 : goto 8405
8403 resume 8404
8404 on error goto 0 : goto 8505
8405 gosub 10900 : T$(0)="Saving" : gosub 11000
8410 gosub 11500
8415 on error goto 8475
8416 open out #1,FILENAME$
8420 A$="Lionpoubnk"+space$(8) : loke varptr(A$)+10,1 : loke varptr(A$)+14,$81000000+BANKSIZE : print #1,A$;
8425 A$=space$(22) : loke varptr(A$),$19861987 : loke varptr(A$)+4,$12 : loke varptr(A$)+8,SPRSIZE+$12 : loke varptr(A$)+12,SPRSIZE+$12+DMIDHI
8430 doke varptr(A$)+16,SPRNB : doke varptr(A$)+18,NSMID : doke varptr(A$)+20,NSHI : print #1,A$;
8435 if SPRNB then AD=SPRNB*8+36 : A$=space$(SPRNB*8) :  : for N=0 to SPRNB-1 : loke varptr(A$)+N*8,AD : poke varptr(A$)+N*8+4,TX(N)/16 : poke varptr(A$)+N*8+5,TY(N) : poke varptr(A$)+N*8+6,HX(N) : poke varptr(A$)+N*8+7,HY(N) : AD=AD+((len(S$(N))-8)*5)/4 : next N : print #1,A$;
8440 A$=space$(36) : loke varptr(A$),CODEPAL : for X=0 to 15 : doke varptr(A$)+4+X*2,PAL(X) : next X : print #1,A$;
8445 if SPRNB then locate OPXT,OPYT+3 : print "Out of";SPRNB; : for N=0 to SPRNB-1 : locate OPXT,OPYT+2 : print "Number";N+1; : A$=space$(((len(S$(N))-8)*5)/4) : areg(1)=varptr(S$(N)) : areg(2)=varptr(A$) : dreg(0)=4 : call 15 : print #1,A$; : next N
8450 if len(OTHER$) then print #1,OTHER$;
8455 if pof(1)<LBANK+18 then A$=space$(LBANK+18-pof(1)) : print #1,A$;
8460 close : goto 8005
8475 resume 8285
8499 rem > SAVE AS
8500 M=5 : gosub 10700
8505 gosub 11700 : FILTER$=".MBK" : T$="       SAVE a sprite bank" : T=6 : gosub 11200
8510 if F$="" then 8005
8515 on error goto 0
8520 if dir first$(F$,-1)="" then 8535
8525 gosub 10900 : T$(1)="Please" : T$(2)="confirm " : gosub 11000
8530 gosub 11100 : if R=0 then 8005
8535 FILENAME$=F$ : goto 8405
8599 rem > QUIT
8600 M=6 : gosub 10700 : gosub 10900 : T$(0)="QUIT" : T$(2)="Confirm!" : gosub 11000
8605 gosub 11100 : if R=0 then 8005
8610 default : end 
8699 rem > QUIT & GRAB
8700 M=7 : TMEN=2 : gosub 10700 : gosub 10900 : T$(0)="QUIT" : T$(1)="& GRAB" : T$(3)="Confirm!" : gosub 11000
8705 gosub 11100 : if R=0 then 8005
8706 if accnb=0 then bell : goto 8005
8710 if BANKSIZE>=$10000 then if free+$10000<=BANKSIZE then boom : T$(0)="Bank too" : T$(1)="big!" : T$(3)="Use save." : gosub 10900 : gosub 11000 : wait 300 : goto 8005
8715 gosub 10900 : T$(0)="Grabbing" : gosub 11000 : sprite off : update : show on : erase 10 : erase 12 : erase 13 : erase 5 : bcopy 1 to 5 : erase 1 : reserve as data 1,BANKSIZE : A=start(1)
8720 loke A,$19861987 : loke A+4,$12 : loke A+8,SPRSIZE+$12 : loke A+12,SPRSIZE+$12+DMIDHI : doke A+16,SPRNB : doke A+18,NSMID : doke A+20,NSHI : A=A+22
8725 if SPRNB then AD=SPRNB*8+36 : for N=0 to SPRNB-1 : loke A,AD : poke A+4,TX(N)/16 : poke A+5,TY(N) : poke A+6,HX(N) : poke A+7,HY(N) : AD=AD+((len(S$(N))-8)*5)/4 : A=A+8 : next N
8730 loke A,CODEPAL : A=A+4 : for X=0 to 15 : doke A,PAL(X) : A=A+2 : next X
8735 if SPRNB then locate OPXT,OPYT+3 : print "Out of";SPRNB; : for N=0 to SPRNB-1 : locate OPXT,OPYT+2 : print "Number";N+1; : areg(1)=varptr(S$(N)) : areg(2)=A : dreg(0)=4 : call 15 : A=A+((len(S$(N))-8)*5)/4 : next N
8740 if len(OTHER$)<>0 and (NSMID<>0 or NSHI<>0) then copy varptr(OTHER$),varptr(OTHER$)+len(OTHER$) to A
8745 put key "default:bgrab"+str$(accnb)+",1:erase"+str$(accnb)+",1`"
8750 fade 1 : wait 8 : cls : end 
8997 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
8998 rem            HOT POINT
8999 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
9000 M=5 : gosub 10700
9005 gosub 9400 : gosub 10900 : T$(1)="HOT SPOT" : gosub 11000 : REDO=true : gosub 10300 : FLINK=0
9010 repeat 
9015 gosub 10100 : if KM=2 then 9050
9025 ink FLINK : auto back on : plot XSPR+HOTX,YSPR+HOTY : gosub 10000 : FLINK=(FLINK+1) mod 16
9030 until KM
9035 HOTX=XS : HOTY=YS : gosub 10350 : gosub 10000 : goto 9010
9050 M=0 : gosub 10700 : M=8 : gosub 10700 : gosub 10350 : gosub 10000 : goto 3450
9099 rem > Menu options
9100 HOTNB=0 : gosub 9200 : goto 9005
9105 HOTNB=1 : gosub 9200 : goto 9005
9110 HOTNB=2 : gosub 9200 : goto 9005
9115 HOTNB=3 : gosub 9200 : goto 9005
9120 HOTNB=4 : gosub 9200 : goto 9005
9125 HOTNB=5 : gosub 9200 : goto 9005
9130 HOTNB=6 : gosub 9200 : goto 9005
9199 rem > Set hot point
9200 if HOTNB=0 or HOTNB=3 then HOTX=0
9205 if HOTNB=1 or HOTNB=6 or HOTNB=4 then HOTX=TX/2-1
9210 if HOTNB=2 or HOTNB=5 then HOTX=TX-1
9215 if HOTNB=0 or HOTNB=1 or HOTNB=2 then HOTY=0
9220 if HOTNB=6 then HOTY=TY/2-1
9225 if HOTNB=3 or HOTNB=4 or HOTNB=5 then HOTY=TY-1
9230 return 
9399 rem Hot spot menu
9400 MENNB=6 : unpack 11,13 : screen copy 13,MENNB*32,0,MENNB*32+32,145 to back,0,0
9405 logic=back : auto back off : M=HOTNB+1 : gosub 10705 : goto 4920
9497 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
9498 rem             STORAGE
9499 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
9500 M=8 : gosub 10700
9505 MENNB=9 : gosub 10600
9510 gosub 10900 : T$(0)="STORAGE " : T$(2)="Bank size:" : T$(3)=(str$(BANKSIZE)-" ")+" " : gosub 11000
9515 repeat : gosub 10100 : until KM=2
9550 M=0 : gosub 10700 : goto 3450
9599 rem > Delete sprite
9600 M=2 : gosub 10700 : gosub 9605 : goto 9505
9605 if SPRCUR=SPRNB or SPRNB=0 then bell : return 
9610 for X=SPRCUR to SPRNB-1 : S$(X)=S$(X+1) : TX(X)=TX(X+1) : TY(X)=TY(X+1) : HX(X)=HX(X+1) : HY(X)=HY(X+1) : next X
9615 S$(SPRNB)="" : TX(SPRNB)=0 : TY(SPRNB)=0 : HX(SPRNB)=0 : HY(SPRNB)=0 : dec SPRNB
9620 gosub 11300 : gosub 11375 : gosub 11500 : gosub 11900 : while mouse key : wend : OLDGET=-1 : return 
9699 rem > Insert sprite
9700 M=3 : TMEN=2 : gosub 10700 : gosub 9705 : goto 9505
9705 gosub 10300 : if SPRNB>=SPRMAXNB or SPRSIZE+len(SP$)>SPRMAXBANK then boom : return 
9710 if SPRCUR=SPRNB then NOSC=false : goto 9901
9715 for X=SPRNB to SPRCUR+1 step-1 : S$(X)=S$(X-1) : TX(X)=TX(X-1) : TY(X)=TY(X-1) : HX(X)=HX(X-1) : HY(X)=HY(X-1) : next X
9720 S$(SPRCUR)=SP$ : TX(SPRCUR)=TX : TY(SPRCUR)=TY : HX(SPRCUR)=HOTX : HY(SPRCUR)=HOTY
9725 inc SPRNB : gosub 11300 : gosub 11375 : gosub 11500 : gosub 11900 : while mouse key : wend : return 
9799 rem > Get sprite
9800 M=7 : TMEN=2 : gosub 10700 : gosub 9805 : goto 9505
9805 OLDGET=-1 : if SPRCUR=SPRNB then bell : return 
9810 SP$=S$(SPRCUR) : TX=TX(SPRCUR) : TY=TY(SPRCUR) : HOTX=HX(SPRCUR) : HOTY=HY(SPRCUR)
9815 cls back,0,XSPR,YSPR to XSPR+64,YSPR+64 : cls logic,0,XSPR,YSPR to XSPR+64,YSPR+64 : gosub 10350 : OLDTX=-1 : gosub 10000
9820 OLDGET=SPRCUR : return 
9899 rem > Put sprite
9900 M=5 : TMEN=2 : gosub 10700 : NOSC=false : gosub 9901 : goto 9505
9901 gosub 10300 : if SPRCUR=SPRNB then if SPRNB>=SPRMAXNB then boom : return 
9902 if SPRSIZE-len(S$(SPRCUR))+len(SP$)>=SPRMAXBANK then boom : return 
9905 S$(SPRCUR)=SP$ : TX(SPRCUR)=TX : TY(SPRCUR)=TY : HX(SPRCUR)=HOTX : HY(SPRCUR)=HOTY
9910 if SPRCUR=SPRNB and NOSC=0 then inc SPRNB : gosub 11300 : gosub 11375 : sprite off 1 : update : gosub 3601 else gosub 11300 : gosub 11375
9920 gosub 11500
9925 while mouse key : wend : NOSC=false : return 
9949 rem > Erase bank
9950 M=1 : gosub 10700
9955 gosub 10900 : T$(0)="Erase bank" : T$(2)="CONFIRM!" : gosub 11000
9960 gosub 11100 : if R=0 then 9505
9965 gosub 11400 : gosub 11300 : gosub 11375 : gosub 11500 : gosub 11900 : goto 9505
9990 rem ---------------------------
9991 rem        SUB ROUTINES
9992 rem ---------------------------
9999 rem > ZOOM
10000 if TX=OLDTX and TY=OLDTY then dreg(0)=1 : call 15 : screen copy back,XZOOM,YZOOM,XZOOM+TX*IZOOM,YZOOM+TY*IZOOM to logic,XZOOM,YZOOM : return 
10003 cls back,0,XZOOM,YZOOM to XZOOM+TXZOOM,YZOOM+TYZOOM
10005 for X=16 to 2 step-1 : if TX*X>TXZOOM then next X
10010 for Y=16 to 2 step-1 : if TY*Y>TYZOOM then next Y
10015 IZOOM=min(X,Y)
10020 ink 1 : set line $FFFF,1,0,0 : logic=back : auto back off 
10025 if TX*IZOOM<TXZOOM then draw XZOOM+TX*IZOOM,YZOOM to XZOOM+TX*IZOOM,YZOOM+TYZOOM-1
10030 if TY*IZOOM<TYZOOM then draw XZOOM,YZOOM+TY*IZOOM to XZOOM+TXZOOM-1,YZOOM+TY*IZOOM
10035 if TX<64 then draw XSPR+TX,YSPR to XSPR+TX,YSPR+64
10040 if TY<64 then draw XSPR,YSPR+TY to XSPR+64,YSPR+TY
10045 logic=physic : screen copy back,XSPR,YSPR,XSPR+64,YSPR+64 to logic,XSPR,YSPR
10050 set zone 50,XZOOM,YZOOM to XZOOM+TX*IZOOM-1,YZOOM+TY*IZOOM-1
10055 areg(1)=ADSPR+back : areg(2)=ADZOOM+back : areg(3)=start(12) : dreg(0)=0 : dreg(1)=IZOOM : dreg(2)=TX/16 : dreg(3)=TY : call 15
10060 dreg(0)=1 : call 15 : screen copy back,XZOOM,YZOOM,XZOOM+TXZOOM,YZOOM+TYZOOM to logic,XZOOM,YZOOM
10065 OLDTX=TX : OLDTY=TY
10070 return 
10099 rem > Mouse in zone <
10100 XM=x mouse : YM=y mouse : KM=mouse key : OLDZ=Z : Z=zone(1) : K$=inkey$ : SC=scancode
10101 if K$="" then 10110
10102 clear key : if MENNB<>7 and SC=97 then gosub 2200 : goto 10100
10103 if MENNB=9 or MENNB=7 then 10110
10104 wait 5 : sprite off : update : if SC=75 then gosub 10360 : gosub 11800 : goto 10100 else if SC=77 then gosub 10360 : gosub 11805 : goto 10100
10105 if SC<>OLDSC and (SC=72 or SC=80 or SC=83 or SC=82) then OLDSC=SC : goto 10110
10106 OLDSC=-1 : if SC=72 then gosub 10360 : gosub 9805 : goto 10100 else if SC=80 then gosub 10360 : NOSC=false : gosub 9901 : goto 10100 else if SC=83 then gosub 10360 : gosub 9605 : goto 10100 else if SC=82 then gosub 10360 : gosub 9705 : goto 10100
10110 if Z=50 and MENNB=0 then sprite 1,XM,YM,SPMOUSE else sprite 1,XM,YM,1
10115 redraw : if Z<>50 then 10135
10120 X=(XM-XZOOM)/IZOOM : Y=(YM-YZOOM)/IZOOM
10125 if X<0 or (X>=TX) or Y<0 or Y>=TY or (X=OLDXS and Y=OLDYS and KM=OLDKM) then 10100
10130 XS=X : YS=Y : locate 29,23 : paper 0 : pen 1 : auto back off : print using "X:##";X; : locate 35,23 : print using "Y:##";Y; : return 
10135 if OLDZ=50 then if REDO then gosub 10350 : gosub 10000
10136 if OLDZ=50 then auto back on : ink 1 : set paint FIL1,FIL2,1 : bar XPAINT,YPAINT to 319,YPAINT+TYPAINT : OLDZ=Z : if MENNB=7 then return 
10137 if KM=2 then return 
10138 if Z=0 then 10100
10150 if KM<>1 then 10100
10151 OLDXS=-1 : OLDYS=-1
10152 rem Return to set RGB
10153 if MENNB=7 and Z=92 then return 
10156 rem Storage arrows
10157 if Z>=86 and Z<=91 and MENNB<>7 then sprite off 1 : update : gosub 3600+Z-86 : goto 10100
10158 rem Fix size
10159 if Z=51 and MENNB=8 then return 
10160 rem Jump in palettes
10165 if Z=80 then gosub 2800 : goto 10100
10170 if Z=81 then gosub 2805 : goto 10100
10171 if MENNB<>0 and MENNB<>1 then 10205
10175 rem Jump to fix paint
10180 if Z=62+7 then gosub 1700 : goto 10100
10185 if Z=62+8 then gosub 1800 : goto 10100
10186 rem Jump to Flip/Upside/Rotate
10187 if Z>=15+62 and Z<=17+62 then gosub ROUTINES(Z-62) : goto 10100
10190 rem Jump to UNDO
10195 if Z=12+62 then gosub 2200 : goto 10100
10200 rem Jumps to sprite arrows
10205 if Z>=82 and Z<=85 and MENNB<>8 then gosub 3000+(Z-82)*100 : goto 10100
10206 rem Jump to left menu options
10207 if Z>=52 and Z<=60 then if LEFTAD(MENNB,Z-52) then while mouse key : wend : pop : goto LEFTAD(MENNB,Z-52)
10210 rem Jump to drawing routines
10215 if NOJUMP then 10100
10220 gosub 10500
10225 if Z>=62 and Z<=62+17 then pop : goto ROUTINES(Z-62)
10230 goto 10100
10299 rem > Save sprite <
10300 SP$=screen$(back,XSPR,YSPR to XSPR+TX,YSPR+TY) : return 
10349 rem > Restore sprite <
10350 cls back,0,XSPR,YSPR to XSPR+TX,YSPR+TY : screen$(back,XSPR,YSPR)=SP$
10355 screen copy back,XSPR,YSPR,XSPR+64,YSPR+64 to logic,XSPR,YSPR : return 
10360 if REDO then gosub 10350 : gosub 10000
10365 return 
10399 rem > Display selected option <
10400 if OP=OLDOP then return 
10401 set line $FFFF,1,0,0
10405 if OLDOP>=0 then X=OLDOP mod 6 : Y=OLDOP/6 : cls back,0,XOP+X*16,YOP+Y*16 to XOP+(X+1)*16,YOP+(Y+1)*16 : screen$(back,XOP+X*16,YOP+Y*16)=OP$
10406 if OP<0 then 10425
10410 X=OP mod 6 : Y=OP/6 : OP$=screen$(back,XOP+X*16,YOP+Y*16 to XOP+(X+1)*16,YOP+(Y+1)*16)
10415 auto back off : ink 1 : logic=back : box XOP+X*16+1,YOP+Y*16+1 to XOP+X*16+15,YOP+Y*16+15 : logic=physic
10420 screen copy back,XOP,YOP,320,128+16*3 to logic,XOP,YOP
10425 OLDOP=OP : return 
10499 rem > Set to white left menu command
10500 UNDO$=screen$(back,XSPR,YSPR to XSPR+64,YSPR+64) : UNDOFLG=0
10505 return 
10599 rem > Unpack left menu <
10600 unpack 11,13
10605 screen copy 13,MENNB*32,0,MENNB*32+32,145 to back,0,0
10610 screen copy 13,MENNB*32,0,MENNB*32+32,145 to logic,0,0
10615 return 
10699 rem > Set to white left menu command M
10700 auto back on 
10705 gr writing 3 : set paint 1,1,0 : ink 1 : Y1=M*16+1 : Y2=M*16+(16*TMEN)-1 : if M+TMEN=9 then Y2=Y2+1
10710 bar 1,Y1 to 30,Y2
10715 gr writing 1 : TMEN=1 : return 
10799 rem > Restore Left menu/
10800 gosub 10600 : if MENNB<>0 then return 
10805 screen copy 13,224,146,320,195 to back,XOP,YOP
10810 screen copy 13,224,146,320,195 to logic,XOP,YOP
10815 OLDOP=-1 : gosub 10400
10820 NOJUMP=false : return 
10849 rem > Restore SCREEN smooth!
10850 fade 1 : wait 7 : hide on : unpack 14 : gosub 10800
10851 fade 5,PAL(0),PAL(1),PAL(2),PAL(3),PAL(4),PAL(5),PAL(6),PAL(7),PAL(8),PAL(9),PAL(10),PAL(11),PAL(12),PAL(13),PAL(14),PAL(15)
10855 Z=1 : X=CURINK(Z) and 3 : Y=CURINK(Z)/4 : OLDINK(Z)=(CURINK(Z)+1) mod 16 : gosub 2815
10860 Z=2 : X=CURINK(Z) and 3 : Y=CURINK(Z)/4 : OLDINK(Z)=(CURINK(Z)+1) mod 16 : gosub 2815
10865 gosub 1805
10870 if FLGDEB=0 then OLDTX=-1 : gosub 10350 : gosub 10000
10875 gosub 10500 : gosub 11300 : gosub 11375 : return 
10899 rem > Print in right menu zone
10900 auto back on : gr writing 1 : ink 0
10905 bar XOP+1,YOP+1 to 318,YOP+16*3-1
10910 NOJUMP=true : return 
10999 rem > Print in right menu zone
11000 pen 1 : paper 0
11005 for Y=0 to 3
11010 if T$(Y)<>"" then locate OPXT+5-len(T$(Y))/2,OPYT+Y : print T$(Y);
11015 T$(Y)="" : next Y : NOJUMP=true : return 
11099 rem> BIG confirm
11100 gosub 10300 : UNTX=TX : UNTY=TY : OLDTX=-1 : TX=64 : TY=48
11105 cls back,0,XSPR,YSPR to XSPR+64,YSPR+64 : gosub 10000 : logic=back : auto back off 
11110 gr writing 1 : ink 1 : set paint 1,1,1 : rbar XSPR+15,YSPR+3 to XSPR+48,YSPR+19 : rbar XSPR+15,YSPR+27 to XSPR+48,YSPR+43 : paper 1 : pen 0 : locate 33,2 : print "NO" : locate 33,5 : print "OK"
11115 logic=physic : gosub 10000
11120 cls back,0,XSPR,YSPR to XSPR+64,YSPR+64 : cls logic,0,XSPR,YSPR to XSPR+64,YSPR+64
11121 while mouse key : wend 
11125 repeat : sprite 1,x mouse,y mouse,1 : update : until mouse key
11130 R=false : if x mouse>=87 and x mouse<170 and y mouse>=60 and y mouse<=116 then R=true
11135 cls back,0,XSPR,YSPR to XSPR+64,YSPR+64 : cls logic,0,XSPR,YSPR to XSPR+64,YSPR+64 : TX=UNTX : TY=UNTY : OLDTX=-1 : gosub 10350 : gosub 10000
11140 return 
11199 rem > File selector
11200 on error goto 11250
11205 screen copy back to 13 : sprite off 1 : update : show on : paper 0 : pen 1
11210 F$=file select$("*"+FILTER$,T$,T)
11215 hide on : screen copy 13 to logic : screen copy 13 to back
11220 on error goto 0
11225 if F$="" or FILTER$=".*" then return 
11230 if instr(F$,".")=0 then F$=F$+FILTER$ : return 
11235 if instr(F$,FILTER$)=0 then F$=""
11240 return 
11250 F$="" : resume 11215
11299 rem > Draw sprite selector zone
11300 screen copy back,16,SELY,208,SELY+SELTY to 13,16,SELY
11305 YY=SELY : cls 13,0,16,YY to 16+48,YY+SELTY : cls 13,0,16+64,YY to 16+128,YY+SELTY : cls 13,0,16+144,YY to 16+192,YY+SELTY
11306 paper 1 : pen 0 : logic=13 : back=13
11310 A$="    " : mid$(A$,1)=str$(SPRCUR+1) : for Y=2 to 4 : locate SELXT,SELYT+Y-2 : print mid$(A$,Y,1); : next Y
11311 A$="    " : if SPRCUR<SPRNB then A$="    " : mid$(A$,1)=str$(SPRCUR+2) else A$=" END"
11312 for Y=2 to 4 : locate SELXT+10,SELYT-2+Y : print mid$(A$,Y,1); : next Y
11313 logic=physic : back=default back
11320 if SPRCUR<>0 then screen$(13,16+16-TX(SPRCUR-1)/2,YY+24-TY(SPRCUR-1)/2)=S$(SPRCUR-1)
11325 if SPRNB<>SPRCUR then screen$(13,16+96-TX(SPRCUR)/2,YY+24-TY(SPRCUR)/2)=S$(SPRCUR)
11330 if SPRCUR<SPRNB-1 then screen$(13,16+176-TX(SPRCUR+1)/2,YY+24-TY(SPRCUR+1)/2)=S$(SPRCUR+1)
11335 return 
11375 screen copy 13,16,SELY,208,SELY+SELTY to back,16,SELY : screen copy 13,16,SELY,208,SELY+SELTY to logic,16,SELY : return 
11399 rem > Erases sprite bank
11400 for X=0 to SPRMAXNB : S$(X)="" : TX(X)=0 : TY(X)=0 : HX(X)=0 : HY(X)=0 : next X
11405 SPRNB=0 : SPRCUR=0 : OTHER$="" : DMIDHI=0 : NBMID=0 : NBHI=0 : return 
11499 rem > Calculate BANK size
11500 SPRSIZE=SPRNB*8+36
11505 if SPRNB<>0 then for X=0 to SPRNB-1 : SPRSIZE=SPRSIZE+((len(S$(X))-8)*5)/4 : next X
11510 BANKSIZE=(SPRSIZE+len(OTHER$)+22+255) and $FFFF00 : return 
11599 rem > Set GRABBER zones
11600 set zone 20,XGRAB,YGRAB to XGRAB+215,YGRAB+63
11605 set zone 1,XGRAB,YGRAB+24 to XGRAB+37,YGRAB+43 : set zone 2,XGRAB+37,YGRAB+24 to XGRAB+72,YGRAB+43 : set zone 3,XGRAB,YGRAB+43 to XGRAB+72,YGRAB+63 : set zone 4,XGRAB+72,YGRAB+24 to XGRAB+109,YGRAB+43 : set zone 5,XGRAB+109,YGRAB+24 to XGRAB+144,YGRAB+43 : set zone 6,XGRAB+72,YGRAB+43 to XGRAB+144,YGRAB+63
11610 set zone 7,XGRAB+173,YGRAB to XGRAB+195,YGRAB+13 : set zone 8,XGRAB+173,YGRAB+13 to XGRAB+195,YGRAB+23
11615 set zone 9,XGRAB+173,YGRAB+41 to XGRAB+195,YGRAB+51 : set zone 10,XGRAB+173,YGRAB+51 to XGRAB+195,YGRAB+63
11620 set zone 11,XGRAB+145,YGRAB+23 to XGRAB+162,YGRAB+41 : set zone 12,XGRAB+162,YGRAB+23 to XGRAB+173,YGRAB+41
11625 set zone 13,XGRAB+195,YGRAB+23 to XGRAB+207,YGRAB+41 : set zone 14,XGRAB+207,YGRAB+23 to XGRAB+223,YGRAB+41
11630 return 
11699 rem > Get dir$
11700 A$=dir first$("*.*",-1) : A$=dir$ : if A$="" then A$="\"
11705 return 
11799 rem > Auto PUT
11800 DDX=-1 : goto 11810
11805 DDX=1
11810 if SPRCUR=SPRNB then bell : return 
11815 if OLDGET<>SPRCUR then bell : return 
11820 NOSC=true : gosub 9901
11825 if SPRCUR<>SPRNB-1 or DDX=-1 then S=1 : DX=DDX : gosub 3610
11830 gosub 9805 : return 
11899 rem > Delete all animations
11900 for N=0 to 6 : ANISUP(N)=0 : ANICUR(N)=0 : ANIV(N)=5 : next N : return 
49990 rem ---------------------------
49991 rem           DATAS
49992 rem ---------------------------
49999 rem > Routine lines
50000 data 1000,1100,1200,1300,1400,1500
50005 data 1600,1700,1800,1900,2000,2100
50010 data 2200,2300,2400,2500,2600,2700
50999 rem > Left menus MAIN SCREEN lines address
51000 data 4000,7000,6000,5000,8000,9000,3500,3400,9500
51099 rem > Left menus BLOCS lines address
51100 data 4050,4100,4200,4300,4400,4500,4600,4700,4800
51199 rem > Left menus ANIM lines address
51200 data 7050,0,0,0,0,0,0,7175,7160
51299 rem > Left menus IMAGE GRABBER lines address
51300 data 6050,6100,6100,6100,6600,6700,6400,6405,6500
51399 rem > Left menus PROGRAM GRABBER lines address
51400 data 5050,5200,5200,5200,5200,5200,5200,5100,5100
51499 rem > Left menus FILE lines address
51500 data 8050,8100,8200,8300,8400,8500,8600,8700,8700
51599 rem > Left menus HOT SPOT lines address
51600 data 9050,9100,9105,9110,9115,9120,9125,9130,9050
51799 rem > Left menus RGB SELECTOR lines address
51800 data 3580,3580,3580,3580,3580,3580,3580,3595,3595
51899 rem > Left menus SET XY SIZE lines address
51900 data 3446,3446,3446,3446,3446,3446,3446,3475,3475
51999 rem > Left menus STORAGE lines address
52000 data 9550,9950,9600,9700,9700,9900,9900,9800,9800
52999 rem > Animation menu coordinates
53000 data 225,0,242,23
53001 data 243,0,256,23
53002 data 257,0,286,23
53005 data 287,0,302,23
53006 data 303,0,319,23
53010 data 225,24,254,38
53015 data 256,24,286,38
53020 data 288,24,318,38
53025 data 225,40,254,53
53030 data 256,40,286,53
53035 data 288,40,318,53
60000 A$=inkey$ : S=scancode : if A$<>"" then print S
60005 goto 60000
