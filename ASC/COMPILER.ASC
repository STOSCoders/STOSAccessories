1 rem ----------------------------------
2 rem      STOS BASIC COMPILER
3 rem         Version 3.00
4 rem Patched 208 for all TOS versions
5 rem Origional code by Francois LIONET
6 rem     Patched code by P.Putnik
7 rem       acb fixes by exxos
8 rem          March 2014
9 rem ----------------------------------
10 COMPATH$="C:STOS\" : VER$="MARCH 7 2014"
50 curs off : fade 1 : wait 8 : hide on : key off : PRGNB=current : if mode=1 then mode 0
55 rem break off
60 ZERO1=0 : ZERO2=$12345678 : dreg(0)=$FF05 : dreg(3)=-1 : dreg(4)=-1 : trap 6 : if dreg(3)<>-1 and dreg(4)<>-1 then ZERO1=dreg(3) : ZERO2=dreg(4)
100 CR0$="COMPILER\8X8.CR0"+chr$(0)
105 CR1$="COMPILER\8X8.CR1"+chr$(0)
110 CR2$="COMPILER\8X16.CR2"+chr$(0)
115 dim MOU$(4) : MOU$(0)="COMPILER\MOUSE.SPR"+chr$(0) : MOU$(1)="COMPILER\NOMOUSE.SPR"+chr$(0) : MOU$(2)="COMPILER\LOMOUSE.SPR"+chr$(0) : MOU$(3)="COMPILER\MIMOUSE.SPR"+chr$(0) : MOU$(4)="COMPILER\HIMOUSE.SPR"+chr$(0)
120 DFO$=space$(48) : restore 60000 : for X=0 to 42 step 2 : read Y : doke varptr(DFO$)+X,Y : next X : COMPTST=1 : BWIN=32000 : BSPR=5*1000 : CR0=1 : CR1=1 : CR2=1 : MOU=0
125 IMX=15 : IBK=10 : if mode=2 then IMX=1 : IBK=0
130 DRV$=drive$ : PAT$=dir$+"\"
200 MP=1 : MX=42 : dim NT(MP),XT(MP,MX),YT(MP,MX),IT(MP,MX),T$(MP,MX),ST(MP,MX),BT(MP,MX),CT(MP,MX),ZT(64)
205 for PAGE=0 to 1 : restore 61000+PAGE*1000 : T=1
210 read X : if X<>-2 then XT(PAGE,T)=X : read YT(PAGE,T),IT(PAGE,T),T$(PAGE,T),ST(PAGE,T),BT(PAGE,T),CT(PAGE,T) : inc T : goto 210
215 NT(PAGE)=T : next PAGE
400 if mode<>2 then fade 1,0,$777,$770,$0,$770,$420,$430,$450
402 rem if COMPATH$="" then 420
405 on error goto 415 : if mid$(COMPATH$,2,1)=":" then drive$=left$(COMPATH$,1) : COMPATH$=mid$(COMPATH$,3)
410 dir$="\" : dir$=COMPATH$ : COMPSET=-1 : goto 425
415 rem resume 420
420 rem clw : if drive<2 then locate 0,10 : centre ">>> Searching for compiler folder <<<"
425 gosub 3600 : CDIR$=dir$ : CDRIV=drive : if CDIR$="" then CDIR$="\"
430 rem on error goto 465
436 A$=dir first$("COMPILER\COMP_300.PRG",-1) : if len(A$)=0 then clw : colour 1,$777 : pen 1 : locate 0,10 : boom : centre "COMPILER folder not found," : print : print : centre "please see manual for details." : locate 0,20 : centre "Press mouse key." : while mouse key : wend : repeat : until mouse key : goto 1400 : rem END
437 load "COMPILER\COMP_300.PRG",10
440 if mode=2 then load "COMPILER\PICHI.MBK",9 else load "COMPILER\PICLOW.MBK",9
445 if free<$4000 then 1400
450 reserve as screen 14 : reserve as work 11,free-$1000
455 if accnb=0 then SDISK=1
460 on error goto 0 : goto 500
465 resume 1400
500 IM=start(9) : IMMEM=IM+leek(IM) : IMDISK=IM+leek(IM+4) : IMGEM=IM+leek(IM+8) : IMSTS=IM+leek(IM+12) : IMCOMP=IM+leek(IM+16) : IM=IM+4*5
505 XIM=55 : YIM=25 : DB=104 : XSOU=XIM+16 : YSOU=YIM+28 : XOBJ=XIM+16*11 : YOBJ=YIM+28 : XGEM=XIM+16*10 : YGEM=YIM+DB
510 XOPT=XIM+16 : YOPT=YIM+DB : XQUT=XIM+16*4 : YQUT=YIM+DB : YERR=20 : YMES=11 : XWIN1=XIM+9 : XWIN2=XWIN1+200 : YWIN1=YIM+60 : YWIN2=YIM+74 : XW1=XWIN1 : YW1=YWIN1 : XW2=XWIN2 : YW2=YWIN2
515 if mode=2 then XIM=XIM*2 : YIM=YIM*2 : DB=DB*2 : XSOU=XSOU*2 : YSOU=YSOU*2 : XOBJ=XOBJ*2 : YOBJ=YOBJ*2 : XGEM=XGEM*2 : YGEM=YGEM*2 : XOPT=XOPT*2 : YOPT=YOPT*2 : XQUT=XQUT*2 : YQUT=YQUT*2 : XW1=XW1*2 : YW1=YW1*2 : XW2=XW2*2 : YW2=YW2*2
520 fade 1 : wait 8 : gosub 10300
600 paper 0 : pen IMX : locate 0,YERR
605 centre " Patched by P.Putnik & exxos" : print : centre "Press HELP for information" : print 
610 call start(10)+$1C+12 : print : pen 2 : centre "Compiler version"+str$(dreg(0)/256)+"."+(str$(dreg(0) and 15)-" ") : print : centre VER$ : pen 1
615 TIT=1
1000 gosub 10800 : show on 
1100 gosub 6000 : wait 1 : Z=zone(0) : K=mouse key : if K=0 then 1100
1101 if TIT then TIT=0 : gosub 10510
1102 if Z=0 then 1100
1105 on Z gosub 1200,1300,2000,3000,1400,1500
1110 on error goto 0 : while mouse key : wend : show on : goto 1100
1200 if accnb=0 then bell : return 
1205 SDISK=SDISK xor 1 : gosub 10305 : wait vbl : screen copy back to logic : show on : return 
1300 ODISK=ODISK xor 1 : gosub 10310 : wait vbl : screen copy back to logic : show on : return 
1400 erase 10 : on error goto 1405 : drive$=DRV$ : dir$=PAT$
1405 fade 2 : wait 50 : default : end 
1500 FLAGGEM=FLAGGEM xor 1 : gosub 10315 : wait vbl : screen copy back to logic : show on : return 
2000 if SDISK=0 then 2100
2001 on error goto 2002 : drive$=DRV$ : dir$=PAT$ : goto 2005
2002 resume 2005
2005 on error goto 2900
2010 paper 0 : pen IMX : clw : A$=file select$("*.BAS"," Please select SOURCE file name",1) : B$=dir first$("*.*",-1)
2015 if A$="" then gosub 10300 : return 
2020 if dir first$(A$,-1)="" then gosub 10300 : A$="FILE NOT FOUND" : gosub 10500 : return 
2025 if ODISK=0 then gosub 10300
2030 SOU$=drive$+":"+dir$+"\"+A$
2100 if ODISK=0 then 2200
2101 on error goto 2102 : drive$=DRV$ : dir$=PAT$ : goto 2105
2102 resume 2105
2105 on error goto 2900
2110 F$=".CMP" : if FLAGGEM then F$=".TOS"
2115 paper 0 : pen IMX : clw : A$=file select$("*"+F$," Please select OBJECT file name",1) : gosub 10300 : B$=dir first$("*.*",-1)
2120 if A$="" then return 
2125 OBJ$=drive$+":"+dir$+"\"+A$
2200 on error goto 2210
2205 drive=CDRIV : dir$=CDIR$ : goto 2300
2210 resume 2215
2215 rem ZZZ gosub 10600
2300 on error goto 0
2305 timer=0 : gosub 10000 : hide on 
2310 unpack IMCOMP,logic,XIM,YW1-2/divy : gosub 10100
2400 if dreg(0)=0 then 2500
2405 bell : if dreg(0)<0 then A$="DISK ERROR" : gosub 10500 : return 
2406 if dreg(0)=2 then A$="OUT OF MEMORY" : gosub 10500 : return 
2407 if dreg(0)=1 then A$="NOTHING TO COMPILE" : gosub 10500 : return 
2408 if dreg(0)=3 then A$="COMPILATION STOPPED" : gosub 10500 : return 
2409 if compad<0 then ER$="Error number"+str$(dreg(0)) : goto 2425
2410 ER$="" : AD=hunt(compad to logic,"Not done") : ER=dreg(0)
2415 AD=hunt(AD to logic,chr$(0))+1 : AD=hunt(AD to logic,chr$(0))+1 : dec ER : if ER then 2415
2420 P=peek(AD) : inc AD : if P then ER$=ER$+chr$(P) : goto 2420
2425 if accnb<>0 and SDISK=0 then 2450
2430 gosub 10410 : paper 0 : pen IMX
2435 locate 0,YERR : centre ER$ : print 
2440 centre "in line"+str$(dreg(1)) : A$="ERROR DETECTED" : gosub 10500 : return 
2450 default : print ER$;" in line";dreg(1)
2455 put key "list"+str$(dreg(1))+"`" : end 
2500 locate 0,YERR : pen IMX : A$="  Object length:" : if ODISK then A$=A$+str$(areg(0)) else A$=A$+str$(areg(1)-areg(0))
2505 locate 0,YERR : paper 0 : centre A$+" bytes." : print : centre "  Buffer used:"+str$(areg(2))+" bytes." : print : centre str$(dreg(2))+" instructions in"+str$(timer/50+1)+" seconds."
2510 A$="COMPILATION FINISHED" : gosub 10500 : gosub 10510
2600 if ODISK then return 
2605 F$=".CMP" : if FLAGGEM then F$=".TOS" : goto 2700
2610 if accnb=0 then 2700
2615 DTBK=leek(compad+$4C)+532 : clw : pen IMX
2620 show on : inverse off : reset zone : I=0 : for N=0 to 5 : gosub 2800 : set zone N+1,xgraphic(XX),ygraphic(YY) to xgraphic(XX+TX),ygraphic(YY+TY) : next N
2625 OLDZ=0
2630 Z=zone(0) : K=mouse key
2635 if Z<>OLDZ then if OLDZ then N=OLDZ-1 : I=0 : gosub 2800 : OLDZ=0
2640 if Z<>OLDZ then N=Z-1 : OLDZ=Z : I=1 : gosub 2800
2645 if K=0 or Z=0 then 2630
2650 inverse off : clw : gosub 10800
2655 if Z=1 then 2700
2660 if Z=6 then gosub 10300 : gosub 10800 : return 
2665 locate 0,10 : centre ">>> GRABBING <<<" : on error goto 2670 : drive$=DRV$ : dir$=PAT$ : goto 2675
2670 resume 2675
2675 hide on : areg(2)=compad : areg(3)=back : dreg(0)=Z-2 : call start(10)+$1C+8
2700 on error goto 2900
2705 paper 0 : pen IMX : clw : show on : B$=file select$("*"+F$,"        Save OBJECT file",1) : gosub 10300 : A$=dir first$("*.*",-1)
2710 if B$="" then return 
2715 if instr(B$,".")=0 then B$=B$+F$
2720 A$=">>> SAVING <<<" : gosub 10400 : bsave B$,areg(0) to areg(1) : wait 50
2725 gosub 10410 : return 
2800 if N=0 then YY=1 : TY=3 else if N=5 then YY=23 : TY=1 else YY=6+(N-1)*4 : TY=2
2805 XX=1 : if mode=0 then TX=37 else TX=77
2810 inverse off : locate XX-1,YY-1
2815 if I then square TX+2,TY+2,2 else square TX+2,TY+2,1
2820 if N=0 then locate XX,YY+1 : centre "Save compiled program to disk" : return 
2821 if N=5 then centre "QUIT" : return 
2825 centre "Grab to program #"+(str$(N)-" ") : locate XX,YY+1
2830 if leek(DTBK+(N-1)*8+4)<>2 then centre "PROGRAM AREA USED" else centre "EMPTY"
2835 return 
2900 gosub 10300 : A$=">>> DISK ERROR <<<" : gosub 10500 : resume 2905
2905 return 
2999 rem---> Compiler options
3000 if mode=0 then mode 1 : paper 0 : pen 1 : colour 0,0 : colour 1,$666
3005 PAGE=0
3010 IT(0,29)=1 : IT(0,30)=0 : if deek(varptr(DFO$)+32) then swap IT(0,29),IT(0,30)
3015 IT(0,26)=1 : IT(0,27)=0 : if deek(varptr(DFO$)+34) then swap IT(0,26),IT(0,27)
3020 IT(0,7)=1 : IT(0,8)=0 : if deek(varptr(DFO$)+36) then swap IT(0,7),IT(0,8)
3025 IT(0,35)=1 : IT(0,36)=0 : if deek(varptr(DFO$)+38) then swap IT(0,35),IT(0,36)
3030 IT(0,10)=1 : IT(0,11)=0 : if deek(varptr(DFO$)+40) then swap IT(0,10),IT(0,11)
3035 IT(0,32)=1 : IT(0,33)=0 : if deek(varptr(DFO$)+42) then swap IT(0,32),IT(0,33)
3040 IT(0,3)=0 : IT(0,4)=0 : IT(0,5)=0 : IT(0,COMPTST+3)=1
3045 gosub 3900
3050 IT(1,3)=CR0 : IT(1,4)=CR1 : IT(1,5)=CR2
3055 for X=0 to 4 : IT(1,7+X)=0 : next X : IT(1,7+MOU)=1
3060 gosub 3910 : gosub 3920
3095 if mouse key=2 then 3300
3100 PAGE=0 : gosub 11100
3105 gosub 11400 : if CHOICE<100 then gosub 3200+(CHOICE-1)*10 : goto 3105
3110 if CHOICE=100 then gosub 3800 : gosub 10300 : gosub 10800 : return 
3115 if CHOICE=101 then 3300
3120 if CHOICE=102 then gosub 3600 : wait 50 : goto 3000
3125 if CHOICE=103 then gosub 3800 : gosub 3700 : goto 3100
3200 if CC<15 then inc CC
3205 gosub 3900 : T=14 : gosub 11135 : T=16 : gosub 11135 : while mouse key=1 : wend : return 
3210 if CC>0 then dec CC
3215 goto 3205
3220 X=1 : Y=1 : goto 3275
3230 X=1 : Y=2 : goto 3275
3240 X=1 : Y=3 : goto 3275
3250 X=-1 : Y=1 : goto 3275
3260 X=-1 : Y=2 : goto 3275
3270 X=-1 : Y=3
3275 A$=hex$(deek(varptr(DFO$)+CC*2) and $777,3) : C=val(mid$(A$,Y+1,1)) : C=C+X : if C<0 then C=0
3280 if C>7 then C=7
3285 mid$(A$,Y+1,1)=chr$(48+C) : doke varptr(DFO$)+CC*2,val(A$) : goto 3205
3300 PAGE=1 : gosub 11100
3305 gosub 11400 : if CHOICE<100 then gosub 3400+(CHOICE-1)*10 : goto 3305
3310 if CHOICE=100 then gosub 3800 : gosub 10300 : gosub 10800 : return 
3315 if CHOICE=101 then 3100
3320 if CHOICE=102 then gosub 3600 : wait 50 : goto 3000
3325 if CHOICE=103 then gosub 3800 : gosub 3700 : goto 3300
3400 if BWIN<32000 then BWIN=BWIN+1000
3405 gosub 3910 : T=15 : gosub 11135 : while mouse key=1 : wend : return 
3410 if BWIN>6000 then BWIN=BWIN-1000
3415 goto 3405
3420 if BSPR<5000 then BSPR=BSPR+500
3425 gosub 3920 : T=19 : gosub 11135 : while mouse key=1 : wend : return 
3430 if BSPR>500 then BSPR=BSPR-500
3435 goto 3425
3600 rem ZZZ gosub 10600 : if R=0 then return
3605 on error goto 3690
3610 open in #1,"COMPILER\OPTIONS.INF"
3615 input #1,COMPTST,CR0,CR1,CR2,MOU,BWIN,BSPR,A$
3620 close #1 : clw : locate 1,10 : pen 1 : centre ">>> LOADING OPTIONS.INF <<<"
3625 for X=0 to 42 step 2 : doke varptr(DFO$)+X,val("$"+mid$(A$,X*2+1,4)) : next X
3630 on error goto 0 : return 
3690 clw : locate 1,10 : centre ">>> OPTIONS.INF NOT FOUND <<<" : resume 3695
3695 on error goto 0 : return 
3700 rem ZZZ gosub 10600 : if R=0 then return
3705 on error goto 3790 : clw : locate 1,10 : centre ">>> SAVING OPTIONS.INF <<<"
3710 open out #1,"COMPILER\OPTIONS.INF"
3715 print #1,COMPTST;",";CR0;",";CR1;",";CR2;",";MOU;",";BWIN;",";BSPR;",";
3720 A$="" : for X=0 to 42 step 2 : A$=A$+mid$(hex$(deek(varptr(DFO$)+X),4),2) : next X : print #1,A$
3725 close #1
3730 on error goto 0 : return 
3790 bell : clw : locate 1,10 : centre ">>> DISK ERROR <<<" : resume 3695
3800 AD=varptr(DFO$) : doke AD+32,IT(0,30) : doke AD+34,IT(0,27) : doke AD+36,IT(0,8) : doke AD+38,IT(0,36) : doke AD+40,IT(0,11) : doke AD+42,IT(0,33) : COMPTST=0 : if IT(0,4) then COMPTST=1 else if IT(0,5) then COMPTST=2
3805 CR0=IT(1,3) : CR1=IT(1,4) : CR2=IT(1,5) : for MOU=0 to 4 : if IT(1,7+MOU)=0 then next MOU
3810 return 
3900 T$(0,14)=str$(CC)+" "
3905 A$=hex$(deek(varptr(DFO$)+CC*2),3) : A$=mid$(A$,2,1)+"   "+mid$(A$,3,1)+"   "+mid$(A$,4,1) : T$(0,16)=A$ : return 
3910 T$(1,15)=mid$(str$(BWIN/1000),2)+" K-Bytes   " : return 
3920 T$(1,19)=mid$(str$(BSPR),2)+" Bytes   " : return 
5000 rem ******************************************
5001 rem *              exxos quick HELP          *
5002 rem ******************************************
5010 hide : screen copy logic to 14 : fade 1 : wait 50
5020 mode 1
5030 pen 3 : centre "exxos quick STOS Compiler HELP"
5040 print "" : print "" : rem new line
5050 pen 1 : print "SOURCE:"
5055 pen 2 : print "DISC  :Load a BAS file from Disc."
5060 pen 2 : print "MEMORY:Grabs a program from a selected memory bank (1 to 4). These banks are    only selectable via the accessory list (accessed by pressing HELP in the STOS   editor)"
5070 print "" : rem new line
5100 pen 2 : print "NOTE: SOURCE will be fixed to DISC if you have not loaded the compiler ACB into a accessory slot."
5110 print "" : rem new line
5120 pen 1 : print "DESTination:"
5130 pen 2 : print "MEMORY: Copies the compiled program into memory. This option isn't very useful."
5140 pen 2 : print "DISC  :Saves the compiled program to disc."
5150 print "" : rem new line
5160 pen 1 : print "BASIC/GEM:"
5170 pen 2 : print "GEM  :Compiles into a TOS program to run from the GEM desktop."
5180 pen 2 : print "BASIC:Compiles into CMP format to run from the STOS editor. This option isn't   very useful."
5500 pen 3 : print "" : print "" : centre "PRESS ANY KEY TO QUIT HELP"
5510 fade 3,$0,$777,$77,$227
5600 wait key : fade 1 : wait 50 : clw : mode 0 : fade 1 : screen copy 14 to logic : screen copy 14 to back : show : fade 2 to 14 : gosub 10800 : return 
5999 rem check for help key press
6000 I$=inkey$ : if scancode=98 then gosub 5000 : clear key : return 
9999 rem---> Set compiler parameters
10000 areg(A0)=compad : areg(1)=varptr(MOU$(MOU)) : areg(2)=varptr(CR0$) : areg(3)=varptr(CR1$) : areg(4)=varptr(CR2$) : areg(5)=varptr(DFO$) : dreg(0)=PRGNB : dreg(1)=FLAGGEM : dreg(2)=XWIN1 : dreg(3)=YWIN1 : dreg(4)=(XWIN2-XWIN1)/5 : dreg(5)=YWIN2-YWIN1 : dreg(6)=BWIN : dreg(7)=BSPR
10005 call start(10)+$1C : return 
10099 rem---> Compile
10100 if mouse key=3 then physic=back
10105 areg(0)=start(11) : areg(1)=start(11)+length(11) : areg(2)=back : areg(3)=back+32000 : areg(4)=0 : areg(5)=0 : dreg(0)=COMPTST : dreg(1)=ZERO1 : dreg(2)=ZERO2
10106 if SDISK then areg(4)=varptr(SOU$)
10107 if ODISK then areg(5)=varptr(OBJ$)
10110 call start(10)+$1C+4 : clear key : physic=logic : gosub 10300 : return 
10299 rem---> displays picture
10300 hide on : curs off : cls back : if mode=1 then mode 0
10301 unpack IM,back,XIM,YIM : gosub 10305 : gosub 10310 : gosub 10315
10302 screen copy back to logic : if mode<>2 then get palette (back)
10303 return 
10305 if SDISK then unpack IMDISK,back,XSOU,YSOU : return else unpack IMMEM,back,XSOU,YSOU : return 
10310 if ODISK then unpack IMDISK,back,XOBJ,YOBJ : return else unpack IMMEM,back,XOBJ,YOBJ : return 
10315 if FLAGGEM then unpack IMGEM,back,XGEM,YGEM : return else unpack IMSTS,back,XGEM,YGEM : return 
10399 rem---> Print in window
10400 paper IBK : pen IMX : locate 1,YMES : centre " "+A$ : return 
10409 rem---> Erases window
10410 ink IBK : bar XW1,YW1 to XW2,YW2 : return 
10500 gosub 10410 : gosub 10400 : locate 0,YERR+4 : paper 0 : pen IMX : centre "< press mousekey >"
10505 while mouse key : wend : repeat : until mouse key : gosub 10410
10510 locate 0,YERR : paper 0 : print space$(396/divx); : return 
10599 rem---> Select COMPILER directory
10799 rem---> Set menu zones
10800 reset zone : set zone 1,XIM+18/divx,YIM+56/divy to XIM+100/divx,YIM+90/divy
10805 set zone 2,XIM+338/divx,YIM+56/divy to XIM+420/divx,YIM+90/divy
10810 set zone 3,XIM+132/divx,YIM+162/divy to XIM+282/divx,YIM+194/divy
10815 set zone 4,XIM+16/divx,YIM+DB to XIM+128/divx,YIM+DB+32/divy
10820 set zone 5,XIM+154/divx,YIM+DB to XIM+280/divx,YIM+DB+32/divy
10825 set zone 6,XIM+306/divx,YIM+DB to XIM+418/divx,YIM+DB+32/divy
10830 return 
11099 rem---> Draw menu page
11100 clw : reset zone : for X=0 to 64 : ZT(X)=0 : next X : gr writing 1 : set line $FFFF,1,0,0
11105 for T=1 to NT(PAGE) : gosub 11135 : next T
11110 for T=1 to NT(PAGE) : if ST(PAGE,T) then gosub 11200
11115 next T : NZ=1
11120 for T=1 to NT(PAGE) : if BT(PAGE,T) or CT(PAGE,T) then X1=xgraphic(XT(PAGE,T))-4/divx : Y1=ygraphic(YT(PAGE,T))-2/divy : X2=xgraphic(XT(PAGE,T)+len(T$(PAGE,T)))+4/divx : Y2=ygraphic(YT(PAGE,T)+1)+2/divy-1 : set zone NZ,X1,Y1 to X2,Y2 : ZT(NZ)=T : inc NZ
11125 next T : return 
11130 rem---> Print one menu line
11135 if XT(PAGE,T)=-1 then XT(PAGE,T)=40-len(T$(PAGE,T))/2
11140 locate XT(PAGE,T),YT(PAGE,T) : curs off : if IT(PAGE,T) then inverse on else inverse off 
11145 print T$(PAGE,T); : return 
11199 rem---> Draw square
11200 X1=xgraphic(XT(PAGE,T))-4/divx : Y1=ygraphic(YT(PAGE,T))-2/divy : X2=xgraphic(XT(PAGE,T)+len(T$(PAGE,T)))+4/divx : Y2=ygraphic(YT(PAGE,T)+1)+2/divy-1
11205 ink 2 : polyline X1,Y1 to X2,Y1 to X2,Y2 to X1,Y2 to X1,Y1
11210 return 
11300 X1=xgraphic(XT(PAGE,T))-4/divx : Y1=ygraphic(YT(PAGE,T))-2/divy : X2=xgraphic(XT(PAGE,T)+len(T$(PAGE,T)))+4/divx : Y2=ygraphic(YT(PAGE,T)+1)+2/divy-1
11305 ink 0 : polyline X1,Y1 to X2,Y1 to X2,Y2 to X1,Y2 to X1,Y1
11310 return 
11399 rem---> Menu loop
11400 repeat 
11405 repeat : K=mouse key : Z=zone(0) : until K or Z
11410 if K then if Z then T=ZT(Z) : goto 11445 else 11440
11415 T=ZT(Z) : OLDIT=IT(PAGE,T) : CPT=1
11420 repeat : K=mouse key : Z=zone(0) : if Z then Z=ZT(Z)
11425 dec CPT : if CPT=0 then CPT=8 : IT(PAGE,T)=IT(PAGE,T) xor 1 : gosub 11135 : wait vbl : IT(PAGE,T)=OLDIT : gosub 11135
11430 wait vbl : until K or Z<>T : IT(PAGE,T)=OLDIT : gosub 11135
11435 if K then 11445
11440 until false
11445 B=BT(PAGE,T)
11450 if B=0 then 11510
11455 if B<100 then 11480
11460 A$=T$(PAGE,T) : for X=len(A$) to 1 step-1 : if mid$(A$,X,1)=" " then A$=left$(A$,X-1) : next X
11465 L=B-100 : locate XT(PAGE,T),YT(PAGE,T) : curs on : gosub 10000 : curs off 
11470 if len(R$)<L then R$=R$+space$(L-len(R$))
11475 T$(PAGE,T)=R$ : gosub 11135 : goto 11510
11480 if B<0 then IT(PAGE,T)=IT(PAGE,T) xor 1 : gosub 11135 : while mouse key : wend : goto 11400
11484 if IT(PAGE,T) then 11400
11485 IT(PAGE,T)=1 : gosub 11135
11490 OLDT=T : T=B
11495 while T<>OLDT
11500 if IT(PAGE,T) then IT(PAGE,T)=0 : gosub 11135
11505 T=BT(PAGE,T) : wend 
11510 if CT(PAGE,T)=0 then 11400
11515 CHOICE=CT(PAGE,T) : return 
60000 data $0,$777,$70,$0,$770,$420,$430,$450
60005 data $555,$333,$733,$373,$773,$337,$737,$337
60010 data 1
60015 data 1
60020 data 1
60025 data 0
60030 data 0
60035 data 1
60999 rem---> First page menu
61000 data-1
61010 data 0,0,">>>> COMPILING OPTIONS PAGE 1 <<<<",0,0,0
61020 data 0,2,0," - Compiler tests :",0,0,0
61030 data 40,2,0,"   OFF    ",1,4,0
61040 data 54,2,0,"  NORMAL  ",1,5,0
61050 data 68,2,0,"  ALWAYS  ",1,3,0
61060 data 0,4,0," - Resolution mode (in colour) : ",0,0,0
61070 data 40,4,0,"  LOWRES  ",1,8,0
61080 data 54,4,0,"  MIDRES  ",1,7,0
61090 data 0,6,0," - Back & white environment : ",0,0,0
61100 data 40,6,0,"  NORMAL  ",1,11,0
61110 data 54,6,0," INVERSE  ",1,10,0
61120 data 0,10,0," - Default palette (in colour) : ",0,0,0
61130 data 40,10,0,"  COLOUR  ",0,0,0
61140 data 43,11,0," 0 ",0,0,0
61150 data 54,10,0,"R   G   B",0,0,0
61160 data 54,11,0,"0   0   0",0,0,0
61170 data 40,8,0,"    ++    ",1,0,1
61180 data 40,13,0,"    --    ",1,0,2
61190 data 54,8,0,"+",1,0,3
61200 data 58,8,0,"+",1,0,4
61210 data 62,8,0,"+",1,0,5
61220 data 54,13,0,"-",1,0,6
61230 data 58,13,0,"-",1,0,7
61240 data 62,13,0,"-",1,0,8
61250 data 0,15,0," - Function keys :",0,0,0
61260 data 40,15,0,"   OFF    ",1,27,0
61270 data 54,15,0,"    ON    ",1,26,0
61280 data 0,17,0," - Cursor :",0,0,0
61290 data 40,17,0,"   OFF    ",1,30,0
61300 data 54,17,0,"    ON    ",1,29,0
61310 data 0,19,0," - Mouse :",0,0,0
61320 data 40,19,0,"   HIDE   ",1,33,0
61330 data 54,19,0,"   SHOW   ",1,32,0
61340 data 0,21,0," - Language :",0,0,0
61350 data 40,21,0," ENGLISH  ",1,36,0
61360 data 54,21,0,"  FRENCH  ",1,35,0
61370 data 3,23,0," MAIN MENU ",1,0,100
61380 data 20,23,0," NEXT PAGE ",1,0,101
61390 data 40,23,0," LOAD OPTIONS ",1,0,102
61400 data 60,23,0," SAVE OPTIONS ",1,0,103
61999 data-2
62000 data-1
62010 data 0,0,">>>> COMPILING OPTIONS PAGE 2 <<<<",0,0,0
62020 data 0,2,0," - Loaded character sets :",0,0,0
62030 data 40,2,0,"  LOWRES  ",1,-1,0
62040 data 54,2,0,"  MIDRES  ",1,-1,0
62050 data 68,2,0,"  HIRES   ",1,-1,0
62060 data 0,4,0," - Loaded mouse pointers :",0,0,0
62070 data 40,4,0,"   ALL    ",1,8,0
62080 data 54,4,0,"   NONE   ",1,9,0
62090 data 40,6,0,"  LOWRES  ",1,10,0
62100 data 54,6,0,"  MIDRES  ",1,11,0
62110 data 68,6,0,"  HIRES   ",1,7,0
62120 data 0,10,0," - Window buffer size :",0,0,0
62130 data 40,8,0,"    ++    ",1,0,1
62140 data 40,12,0,"    --    ",1,0,2
62150 data 40,10,0," ",0,0,0
62160 data 0,16,0," - Sprites buffer size :",0,0,0
62170 data 40,14,0,"    ++    ",1,0,3
62180 data 40,18,0,"    --    ",1,0,4
62190 data 40,16,0," ",0,0,0
62200 data 3,23,0," MAIN MENU ",1,0,100
62210 data 21,23,0," PREVIOUS PAGE ",1,0,101
62220 data 40,23,0," LOAD OPTIONS ",1,0,102
62230 data 60,23,0," SAVE OPTIONS ",1,0,103
62999 data-2
